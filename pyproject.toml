[build-system]
  # TODO: look into tox installation issue
  requires = ["poetry-core>=1.1.0a6", "setuptools"]
  build-backend = "poetry.core.masonry.api"


# -- TESTING COFIGURATION -------------------------------------------------------------
[tool._testing]
  ci_default_python_version = "3.8"
  # Max 10 python versions are currently installed
  # TODO:#i# find way to install multiple py ver in workflow VM in one step
  # https://github.com/actions/setup-python/issues/98
  ci_test_python_versions = [
    # pypy
    "pypy-3.7",
    # cpython
    "3.8", "3.9", "3.10"
  ]
  ci_test_os = ["ubuntu", "macos", "windows"]
  cc_test_reporter_version = "latest-linux-amd64"
  skip_install = false  # Application -> true || Library -> false
  toxenv_python_versions_win32 = "py{310,39,38,37}"
  toxenv_python_versions_darwin = "py{py3,310,39,38,37}"
  toxenv_python_versions_linux = "py{py3,310,39,38,37}"
  toxenv_docs_builders = "test_docs-{html,linkcheck,coverage,doctest,spelling}"


# -- POETRY CONFIG --------------------------------------------------------------------
[tool.poetry]
  name = "python_test_cielquan"
  version = "1.1.0"
  description = "test stufff"
  authors = ["Christian Riedel <cielquan@protonmail.com>"]
  license = "GPL-3.0-or-later"
  packages = [{ include = "python_test_cielquan", from = "src" }]
  readme = "README.rst"
  keywords = []
  classifiers = []

  [tool.poetry.urls]
    "Issue Tracker" = "https://github.com/Cielquan/python_test-cielquan/issues"
    "Changelog" = "https://python-test-cielquan.readthedocs.io/en/latest/changelog/"
    "Documentation" = "https://python-test-cielquan.readthedocs.io"
    "Source" = "https://github.com/Cielquan/python_test-cielquan"

  [tool.poetry.dependencies]
    python = "^3.8"  # NOTE: update min_python_version below also
    importlib-metadata = {version = ">=1.6, <5.0", python = "<3.8"}

  [tool.poetry.group.dev]
    optional = true
  [tool.poetry.group.dev.dependencies]
    devtools = ">=0.8"
    py-devtools-builtin = ">=1"
    tox = ">=3.24"
    virtualenv = ">=20.3"
    # TODO:#i# wait for new release: https://github.com/myint/rstcheck/issues/69
    rstcheck = {git = "https://github.com/myint/rstcheck.git", rev = "3f92957478422df87bd730abde66f089cc1ee19b"}
    my-flake8-plugins = {git = "https://github.com/cielquan/my-flake8-plugins.git", rev = "v1.0.1", extras= ["flakeheaven"]}

  [tool.poetry.group.testing]
    optional = true
  [tool.poetry.group.testing.dependencies]
    pytest = ">=6"
    pytest-xdist = {extras = ["psutil"], version = ">=2.5"}
    pytest-cov = ">=3"
    pytest-sugar = ">=0.9.4"
    pytest-randomly = ">=3"

  [tool.poetry.group.coverage]
    optional = true
  [tool.poetry.group.coverage.dependencies]
    coverage = {extras = ["toml"], version = ">=6"}
    coverage-conditional-plugin = ">=0.5"
    diff-cover = ">=6.4"

  [tool.poetry.group.docs]
    optional = true
  [tool.poetry.group.docs.dependencies]
    sphinx = ">=4"
    sphinx-autobuild = "2021.3.14"
    m2r2 = ">=0.3.2"
    sphinx-rtd-theme = ">=1"
    sphinx-autodoc-typehints = ">=1.15"
    sphinxcontrib-apidoc = ">=0.3"
    sphinxcontrib-spelling = ">=7.3"

  [tool.poetry.group.pylint]
    optional = true
  [tool.poetry.group.pylint.dependencies]
    pylint = ">=2.12"
    pyenchant = ">=3.2.2"  # if missing pylint errors b/c config

  [tool.poetry.group.mypy]
    optional = true
  [tool.poetry.group.mypy.dependencies]
    mypy = ">=0.931"

  [tool.poetry.group.poetry]
    optional = true
  [tool.poetry.group.poetry.dependencies]
    # TODO:#i# use master branch because of bugfix in 1.1.12 for win32 path cache errors
    poetry = {git = "https://github.com/python-poetry/poetry.git", rev = "1196923dd637ca5cca3b8259a5c9cfabe87649cc"}


# -- BLACK CONFIG ---------------------------------------------------------------------
[tool.black]
  line-length = 100
  exclude = "venv/"
  include = '\.pyi?$'  # single quotes needed


# -- ISORT CONFIG ---------------------------------------------------------------------
[tool.isort]
  profile = "black"
  lines_after_imports = 2
  lines_between_types = 1
  skip_gitignore = true


# -- MYPY CONFIG ----------------------------------------------------------------------
[tool.mypy]
  show_error_codes = true
  strict_optional = true
  warn_unused_ignores = true
  warn_redundant_casts = true
  warn_return_any = true
  warn_unreachable = true
  python_version = 3.8  # CHANGE ME


# -- FLAKEHEAVEN CONFIG ----------------------------------------------------------------
[tool.flakeheaven]
  format="colored"
  max_line_length = 100
  max_complexity = 20
  max_cognitive_complexity = 10
  min_python_version = "3.8"  # CHANGE ME
  pytest_fixture_no_parentheses = true

  [tool.flakeheaven.plugins]
    pyflakes = ["+*"]
    mccabe = ["+*"]
    pycodestyle = [
      "+*",
      # deactivate because of black
      "-W503",  # line break before binary operator
      "-E203",  # whitespace before ':'
      # deactivate because double check
      "-E722",  # bare-except B001[flake8-bugbear]
      # deactivate because unwanted
      "-E731",  # forbids lambda
    ]
    pep8-naming = ["+*"]
    "flake8-*" = ["+*"]
    flake8-aaa = ["-*"]
    flake8-annotations = [
      "+*",
      # deactivate because unwanted
      "-ANN101",  # Missing type annotation for self in method
      "-ANN102",  # Missing type annotation for cls in classmethod
    ]
    flake8-bandit = [
      # deactivate because double check
      "-S110",  # try-except-pass - SIM105[flake8-simplify]
    ]
    flake8-rst-docstrings = [
      "+*",
      # deactivate because unwanted
      "-RST303",  # Unknown directive type
      "-RST304",  # Unknown interpreted text role
    ]
    flake8-use-fstring = [
      "+*",
      # deactivate because unwanted
      "-FS003",  # f-string missing prefix | can be % string
    ]

  [tool.flakeheaven.exceptions]
    [tool.flakeheaven.exceptions."tests/"]
      flake8-aaa = ["+*"]
      flake8-bandit = [
        # deactivate because unwanted
        "-S101",  # assert used
      ]


# -- PYLINT CONFIG --------------------------------------------------------------------
[tool.pylint]
  [tool.pylint.master]
    additional-builtins = "tags"

  [tool.pylint.messages_control]
    disable = [
      # deactivate because double check
      # https://github.com/PyCQA/pylint/issues/3512
      "C0113",  # unneeded-not - F713[flake8]
      "C0114",  # missing-module-docstring - D100,D104[flake8]
      "C0115",  # missing-class-docstring - D101,D106[flake8]
      "C0116",  # missing-function-docstring - D102,D103,D105[flake8]
      "C0301",  # line-too-long - E501[pycodestyle]
      "C0303",  # trailing-whitespace - W291,W293[falke8]
      "C0304",  # missing-final-newline - W292[falke8]
      "C0321",  # multiple-statements - E701[falke8]
      "C0326",  # bad-whitespace - E201,E202,E225[falke8]
      "C0330",  # bad-continuation - E129[falke8]
      "C0411",  # wrong-import-order - I202[flake8]
      "E0602",  # undefined-variable - F821[flake8]
      "R0912",  # too-many-branches - C901[flake8]
      "W0301",  # unnecessary-semicolon - E703[flake8]
      "W0311",  # bad-indentation - E111[flake8]
      "W0312",  # mixed-indentation - W191[flake8]
      "W0611",  # unused-import - F401[flake8]
      "W0612",  # unused-variable - F841[flake8]
      "W0702",  # bare-except - E722[pycodestyle]
      # deactivate because unwanted
      "C040?",  # spelling
      "W0511",  # fixme
      # deactivate because of bugs
      "W1203",  # Use % format in logger funcs | https://github.com/PyCQA/pylint/issues/2354
    ]

  [tool.pylint.spelling]
    spelling-dict = "en_US"
    spelling-private-dict-file = "docs/source/spelling_dict.txt"


# -- PYTEST CONFIG --------------------------------------------------------------------
[tool.pytest.ini_options]
  addopts = "-ra --showlocals"
  mock_use_standalone_module = true
  junit_family = "xunit2"


# -- COVERAGE CONFIG ------------------------------------------------------------------
[tool.coverage]
  [tool.coverage.run]
    plugins = ["coverage_conditional_plugin"]
    branch = true
    parallel = true
    context = "static-context"
    omit = [
      "tests/*",
      "docs/*",
    ]

  [tool.coverage.paths]
    tox_combine = [
      "src/python_test_cielquan",  # CHANGE ME
      "*/.tox/*/lib/python*/site-packages/python_test_cielquan",  # CHANGE ME
      "*/.tox/pypy*/site-packages/python_test_cielquan",  # CHANGE ME
      "*/.tox\\*\\Lib\\site-packages\\python_test_cielquan",  # CHANGE ME
    ]
    local_combine = [
      "src/python_test_cielquan",  # CHANGE ME
      "*/.venv/lib/python*/site-packages/python_test_cielquan",  # CHANGE ME
      "*/.venv\\*\\Lib\\site-packages\\python_test_cielquan",  # CHANGE ME
      "*/src/python_test_cielquan",  # CHANGE ME
      "*\\src\\python_test_cielquan",  # CHANGE ME
    ]

  [tool.coverage.report]
    show_missing = true
    exclude_lines = [
      "# pragma: no cover",
      "if __name__ == ['\"]__main__['\"]:",
      "def __str__",
      "def __repr__",
      "if self.debug:",
      "if settings.DEBUG",
      "if 0:",
      "if False:",
      "if TYPE_CHECKING:",
      "if MYPY:",
    ]

  [tool.coverage.html]
    show_contexts = true

  [tool.coverage.coverage_conditional_plugin]
    [tool.coverage.coverage_conditional_plugin.rules]
      # use with: # pragma: <KEY>
      py-ue-37 = "sys_version_info[0:2] != (3, 7)"
      py-lt-38 = "sys_version_info < (3, 8)"
      py-gte-38 = "sys_version_info >= (3, 8)"
