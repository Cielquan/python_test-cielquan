[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"


# -- TESTING COFIGURATION -------------------------------------------------------------
[tool._testing]
ci_default_python_version = "3.12"
# Max 10 python versions are currently installed
# TODO:#i# find way to install multiple py ver in workflow VM in one step
# https://github.com/actions/setup-python/issues/98
ci_test_python_versions = [
  # pypy
  "pypy-3.9",
  # cpython
  "3.9", "3.10", "3.11", "3.12"
]
ci_test_os = ["ubuntu", "macos", "windows"]
cc_test_reporter_version = "latest-linux-amd64"
skip_install = false  # Application -> true || Library -> false
toxenv_python_versions_win32 = "py{312,311,310,39}"
toxenv_python_versions_darwin = "py{py3,312,311,310,39}"
toxenv_python_versions_linux = "py{py3,312,311,310,39}"
toxenv_docs_builders = "test_docs-{html,linkcheck,coverage,doctest,spelling}"


# -- POETRY CONFIG --------------------------------------------------------------------
[tool.poetry]
name = "python_test_cielquan"
version = "1.1.0"
description = "test stufff"
authors = ["Christian Riedel <cielquan@protonmail.com>"]
license = "GPL-3.0-or-later"
packages = [{ include = "python_test_cielquan", from = "src" }]
readme = "README.rst"
keywords = []
classifiers = []

  [tool.poetry.urls]
  "Issue Tracker" = "https://github.com/Cielquan/python_test-cielquan/issues"
  "Changelog" = "https://python-test-cielquan.readthedocs.io/en/latest/changelog/"
  "Documentation" = "https://python-test-cielquan.readthedocs.io"
  "Source" = "https://github.com/Cielquan/python_test-cielquan"

  [tool.poetry.dependencies]
  python = "^3.8"  # NOTE: update min_python_version below also
  importlib-metadata = {version = ">=1.6,<8.0", python = "<3.8"}

  # dev
  devtools = { version = ">=0.8", optional = true }
  py-devtools-builtin = { version = ">=1", optional = true }
  tox = { version = ">=3.24", optional = true }
  virtualenv = { version = ">=20.3", optional = true }
  # TODO:#i# wait for new release: https://github.com/myint/rstcheck/issues/69
  rstcheck = { git = "https://github.com/myint/rstcheck.git", rev = "3f92957478422df87bd730abde66f089cc1ee19b", optional = true }
  my-flake8-plugins = { git = "https://github.com/cielquan/my-flake8-plugins.git", rev = "v1.0.1", extras= ["flakeheaven"], optional = true }
  # testing
  pytest = { version = ">=7.2", optional = true }
  pytest-xdist = { version = ">=2.5", extras = ["psutil"], optional = true }
  pytest-cov = { version = ">=3", optional = true }
  # TODO:#i# wait for merge/new release: https://github.com/Teemu/pytest-sugar/issues/227
  # pytest-sugar = { version = ">=0.9.4", optional = true }
  pytest-sugar = { git = "https://github.com/brahici/pytest-sugar.git", rev = "3e744862b49d96b3f8383adb48a2d0819d360268", optional = true }
  pytest-randomly = { version = ">=3", optional = true }
  # coverage
  coverage = { version = ">=6", extras = ["toml"], optional = true }
  coverage-conditional-plugin = { version = ">=0.5", optional = true }
  diff-cover = { version = ">=6.4", optional = true }
  # docs
  sphinx = { version = ">=4", optional = true }
  sphinx-autobuild = { version = "2021.3.14", optional = true }
  myst-parser = { version = ">=3", optional = true }
  sphinx-rtd-theme = { version = ">=1", optional = true }
  sphinx-autodoc-typehints = { version = ">=1.15", optional = true }
  sphinxcontrib-apidoc = { version = ">=0.3", optional = true }
  sphinxcontrib-spelling = { version = ">=7.3", optional = true }
  # pylint
  pylint = { version = ">=2.12", optional = true }
  pyenchant = { version = ">=3.2.2", optional = true }  # if missing pylint errors b/c config
  # mypy
  mypy = { version = ">=0.931", optional = true }

  [tool.poetry.extras]
  dev = [
    "devtools", "py-devtools-builtin",
    "tox", "virtualenv",
    "rstcheck",
    "my-flake8-plugins",
    "pytest",
    "sphinx",
    "myst-parser",
    "sphinx-rtd-theme",
    "sphinx-autodoc-typehints",
    "sphinxcontrib-apidoc",
    "sphinxcontrib-spelling",
    "pylint", "pyenchant",
    "mypy",
  ]
  testing = [
    "pytest",
    "pytest-xdist",
    "pytest-cov",
    "pytest-sugar",
    "pytest-randomly",
  ]
  coverage = [
    "coverage",
    "coverage-conditional-plugin",
    "diff-cover",
  ]
  docs = [
    "sphinx",
    "sphinx-autobuild",
    "myst-parser",
    "sphinx-rtd-theme",
    "sphinx-autodoc-typehints",
    "sphinxcontrib-apidoc",
    "sphinxcontrib-spelling",
  ]
  pylint = ["pylint", "pyenchant"]
  mypy = ["mypy"]


# -- MYPY CONFIG ----------------------------------------------------------------------
[tool.mypy]
python_version = "3.8"  # CHANGE ME
follow_imports = "silent"
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_defs = true
check_untyped_defs = true
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
warn_unreachable = true
implicit_reexport = false
show_error_context = true
show_column_numbers = true
plugins = ["pydantic.mypy"]
exclude = "\\.bak\\."

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = false
warn_required_dynamic_aliases = true


# -- PYTEST CONFIG --------------------------------------------------------------------
[tool.pytest.ini_options]
addopts = "-ra --showlocals"
mock_use_standalone_module = true
junit_family = "xunit2"
asyncio_mode = "strict"


# -- COVERAGE CONFIG ------------------------------------------------------------------
[tool.coverage]
  [tool.coverage.run]
  plugins = ["coverage_conditional_plugin"]
  branch = true
  parallel = true
  context = "static-context"
  omit = [
    "tests/*",
    "docs/*",
  ]

  [tool.coverage.paths]
  tox_combine = [
    "src/python_test_cielquan",  # CHANGE ME
    "*/.tox/*/lib/python*/site-packages/python_test_cielquan",  # CHANGE ME
    "*/.tox/pypy*/site-packages/python_test_cielquan",  # CHANGE ME
    "*/.tox\\*\\Lib\\site-packages\\python_test_cielquan",  # CHANGE ME
  ]
  local_combine = [
    "src/python_test_cielquan",  # CHANGE ME
    "*/.venv/lib/python*/site-packages/python_test_cielquan",  # CHANGE ME
    "*/.venv\\*\\Lib\\site-packages\\python_test_cielquan",  # CHANGE ME
    "*/src/python_test_cielquan",  # CHANGE ME
    "*\\src\\python_test_cielquan",  # CHANGE ME
  ]

  [tool.coverage.report]
  show_missing = true
  exclude_lines = [
    "# pragma: no cover",
    "if __name__ == ['\"]__main__['\"]:",
    "def __str__",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "if 0:",
    "if False:",
    "if TYPE_CHECKING:",
    "if typing.TYPE_CHECKING:",
    "if MYPY:",
  ]

  [tool.coverage.html]
  show_contexts = true

  [tool.coverage.coverage_conditional_plugin]
    [tool.coverage.coverage_conditional_plugin.rules]
    # use with: # pragma: <KEY>
    py-ue-37 = "sys_version_info[0:2] != (3, 7)"
    py-lt-38 = "sys_version_info < (3, 8)"
    py-gte-38 = "sys_version_info >= (3, 8)"


# -- RSTCHECK CONFIG ------------------------------------------------------------------
[tool.rstcheck]
ignore_directives = ["mdinclude", "spelling", "click", "jira_issue"]
ignore_roles = ["repo", "issue", "pull", "user"]


# -- RUFF CONFIG ----------------------------------------------------------------------
[tool.ruff]
target-version = "py311"  # CHANGE ME
line-length = 100
output-format = "full"
show-fixes = true
src = ["src"]
extend-exclude = [
  "*venv*/",
  "*.tox/",
  "*.nox/",
  "_backupfiles/",
  "*.bak.*"
]

[tool.ruff.lint]
# MISSING
# flake8-aaa https://github.com/astral-sh/ruff/issues/3462
# flake8-broken-line https://github.com/astral-sh/ruff/issues/3465
# flake8-cognitive-complexity https://github.com/astral-sh/ruff/issues/2418 # max_cognitive_complexity = 10
# flake8-docstrings via pydocstyle?
# flake8-rst-docstrings = ">=0.2.5" # RST...
# flake8-sql https://github.com/sqlfluff/sqlfluff/
# flake8-typing-imports https://github.com/astral-sh/ruff/issues/2302
# flake8-use-fstring partial via UP031/UP032 https://github.com/astral-sh/ruff/issues/2097
# flake8-variables-names https://github.com/astral-sh/ruff/issues/3463
# flake8-walrus https://github.com/astral-sh/ruff/issues/3464
#########
select = [
  "A",     # flake8-builtins
  "AIR",   # Airflow
  "ANN",   # flake8-annotations
  "ARG",   # flake8-unused-arguments
  "ASYNC", # flake8-async
  "B",     # flake8-bugbear
  "BLE",   # flake8-blind-except
  "C4",    # flake8-comprehensions
  "C90",   # mccabe
  # "COM",   # flake8-commas # black does that
  # "CPY",   # flake8-copyright # not needed
  "D",     # pydocstyle
  "DJ",    # flake8-django
  "DTZ",   # flake8-datetimez
  "E",     # pycodestyle
  "EM",    # flake8-errmsg
  "ERA",   # flake8-eradicate
  "EXE",   # flake8-executable
  "F",     # pyflakes
  "FA",    # flake8-future-annotations
  "FBT",   # flake8-boolean-trap
  # "FIX",   # flake8-fixme # custom pre-commit hook does with RegEx
  "FLY",   # flynt
  "FURB",  # refurb
  "G",     # flake8-logging-format
  "I",     # isort
  "ICN",   # flake8-import-conventions
  "INP",   # flake8-no-pep420
  "INT",   # flake8-gettext
  "ISC",   # flake8-implicit-str-concat
  "LOG",   # flake8-logging
  "N",     # pep8-naming
  "NPY",   # NumPy-specific rules
  "PD",    # flake8-vet
  "PERF",  # Perflint
  "PGH",   # pygrep-hooks
  "PIE",   # flake8-pie
  "PLC",   # Pylint - Convention
  "PLE",   # Pylint - Error
  "PLR",   # Pylint - Refactor
  "PLW",   # Pylint - Warning
  "PT",    # flake8-pytest-style
  "PTH",   # flake8-use-pathlib
  "PYI",   # flake8-pyi
  "Q",     # flake8-quotes
  "RET",   # flake8-return
  "RSE",   # flake8-raise
  "RUF",   # Ruff-specific rules
  "S",     # flake8-bandit
  "SIM",   # flake8-simplify
  "SLF",   # flake8-self
  "SLOT",  # flake8-slots
  # "T10",   # flake8-debugger # pre-commit hook does that
  "T20",   # flake8-print
  "TCH",   # flake8-type-checking
  "TD",    # flake8-todos
  "TID",   # flake8-tidy-imports
  "TRY",   # tryceratops
  "UP",    # pyupgrade
  "W",     # pycodestyle
  "YTT",   # flake8-2020
]
ignore = [
  # deactivate because unwanted
  "ANN101",   # type self
  "ANN102",   # type cls
  "E501",     # line length
  "G00",      # logging uses format strings
  "PT011",    # Use match for specific exceptions in pytest.raises
  # Deactivated for ruff-fmt
  "W191",     # tab-indentation
  "E111",     # indentation-with-invalid-multiple
  "E114",     # indentation-with-invalid-multiple-comment
  "E117",     # over-indented
  "D206",     # indent-with-spaces
  "D300",     # triple-single-quotes
  "TD001",    # invalid-todo-tag
  "TD002",    # missing-todo-author
  "TD003",    # missing-todo-link
  "Q000",     # bad-quotes-inline-string
  "Q001",     # bad-quotes-multiline-string
  "Q002",     # bad-quotes-docstring
  "Q003",     # avoidable-escaped-quote
  "COM812",   # missing-trailing-comma
  "COM819",   # prohibited-trailing-comma
  "PT011", # Use match for specific exceptions in pytest.raises
  "ISC001",   # single-line-implicit-string-concatenation
  "ISC002",   # multi-line-implicit-string-concatenation
]
unfixable = ["ERA001"]

task-tags = ["TODO", "FIXME", "XXX", "NOTE", "BUG", "HACK", "CHANGE ME"]
# typing-modules = []

[tool.ruff.lint.per-file-ignores]
"*.pyi" = [
  "ANN401",  # allow Any in stubs
  "FBT",  # ignore boolean trab in stubs
  "TCH",  # don't use type checking blocks in stubs
]
"*.py" = [
  "PYI",  # stub file rules
]
"**/tests/**" = [
  "ARG",  # unused arguments
  "PLR0913",  # Too many arguments to function call
  "PLR2004",  # Magic value comparison
  "S101",  # assert used
  "SLF001",  # Private member accessed
]
"**/tests/**/*_test.py" = [
  "FBT001",  # Boolean positional arg in function definition
]
"__init__.py" = [
  "D104",  # Missing docstring in public package
  "PLC0414",  # useless-import-alias
]

[tool.ruff.lint.flake8-annotations]
suppress-dummy-args = true

[tool.ruff.lint.flake8-bugbear]
extend-immutable-calls = [
  "fastapi.Body",
  "fastapi.Cookie",
  "fastapi.Depends",
  "fastapi.File",
  "fastapi.Form",
  "fastapi.Header",
  "fastapi.Path",
  "fastapi.Query",
  "fastapi.Security",
  "typer.Argument",
  "typer.Option",
]

[tool.ruff.lint.flake8-builtins]
builtins-ignorelist = [
  "id",
]

[tool.ruff.lint.flake8-import-conventions.extend-aliases]
"typing" = "t"

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false

[tool.ruff.lint.flake8-quotes]
avoid-escape = true # NOTE: DEFAULT

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "parents"

[tool.ruff.lint.flake8-type-checking]
runtime-evaluated-base-classes = [
  "pydantic.BaseModel",
  "sqlalchemy.orm.DeclarativeBase",
]
runtime-evaluated-decorators = [
  "attrs.define",
  "attrs.frozen",
]

[tool.ruff.lint.isort]
combine-as-imports = true
known-first-party = []
known-third-party = []
required-imports = [
  "from __future__ import annotations",
]

[tool.ruff.lint.mccabe]
max-complexity = 20

[tool.ruff.lint.pep8-naming]
classmethod-decorators = [
  "pydantic.field_validator",
  "pydantic.model_validator",
]
staticmethod-decorators = []

[tool.ruff.lint.pycodestyle]
ignore-overlong-task-comments = true
max-doc-length = 100

[tool.ruff.lint.pydocstyle]
convention = "pep257"
ignore-decorators = [
  "typing.overload",
]
property-decorators = []

[tool.ruff.lint.pylint]
max-args = 6
