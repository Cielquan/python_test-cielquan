[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"


# -- TESTING COFIGURATION -------------------------------------------------------------
[tool._testing]
ci_default_python_version = "3.8"
# Max 10 python versions are currently installed
# TODO:#i# find way to install multiple py ver in workflow VM in one step
# https://github.com/actions/setup-python/issues/98
ci_test_python_versions = [
  # pypy
  "pypy-3.8", "pypy-3.9",
  # cpython
  "3.8", "3.9", "3.10"
]
ci_test_os = ["ubuntu", "macos", "windows"]
cc_test_reporter_version = "latest-linux-amd64"
skip_install = false  # Application -> true || Library -> false
toxenv_python_versions_win32 = "py{310,39,38,37}"
toxenv_python_versions_darwin = "py{py3,310,39,38,37}"
toxenv_python_versions_linux = "py{py3,310,39,38,37}"
toxenv_docs_builders = "test_docs-{html,linkcheck,coverage,doctest,spelling}"


# -- POETRY CONFIG --------------------------------------------------------------------
[tool.poetry]
name = "python_test_cielquan"
version = "1.1.0"
description = "test stufff"
authors = ["Christian Riedel <cielquan@protonmail.com>"]
license = "GPL-3.0-or-later"
packages = [{ include = "python_test_cielquan", from = "src" }]
readme = "README.rst"
keywords = []
classifiers = []

  [tool.poetry.urls]
  "Issue Tracker" = "https://github.com/Cielquan/python_test-cielquan/issues"
  "Changelog" = "https://python-test-cielquan.readthedocs.io/en/latest/changelog/"
  "Documentation" = "https://python-test-cielquan.readthedocs.io"
  "Source" = "https://github.com/Cielquan/python_test-cielquan"

  [tool.poetry.dependencies]
  python = "^3.8"  # NOTE: update min_python_version below also
  importlib-metadata = {version = ">=1.6,<7.0", python = "<3.8"}

  # dev
  devtools = { version = ">=0.8", optional = true }
  py-devtools-builtin = { version = ">=1", optional = true }
  tox = { version = ">=3.24", optional = true }
  virtualenv = { version = ">=20.3", optional = true }
  # TODO:#i# wait for new release: https://github.com/myint/rstcheck/issues/69
  rstcheck = { git = "https://github.com/myint/rstcheck.git", rev = "3f92957478422df87bd730abde66f089cc1ee19b", optional = true }
  my-flake8-plugins = { git = "https://github.com/cielquan/my-flake8-plugins.git", rev = "v1.0.1", extras= ["flakeheaven"], optional = true }
  # testing
  pytest = { version = ">=7.2", optional = true }
  pytest-xdist = { version = ">=2.5", extras = ["psutil"], optional = true }
  pytest-cov = { version = ">=3", optional = true }
  # TODO:#i# wait for merge/new release: https://github.com/Teemu/pytest-sugar/issues/227
  # pytest-sugar = { version = ">=0.9.4", optional = true }
  pytest-sugar = { git = "https://github.com/brahici/pytest-sugar.git", rev = "3e744862b49d96b3f8383adb48a2d0819d360268", optional = true }
  pytest-randomly = { version = ">=3", optional = true }
  # coverage
  coverage = { version = ">=6", extras = ["toml"], optional = true }
  coverage-conditional-plugin = { version = ">=0.5", optional = true }
  diff-cover = { version = ">=6.4", optional = true }
  # docs
  sphinx = { version = ">=4", optional = true }
  sphinx-autobuild = { version = "2021.3.14", optional = true }
  m2r2 = { version = ">=0.3.2", optional = true }
  sphinx-rtd-theme = { version = ">=1", optional = true }
  sphinx-autodoc-typehints = { version = ">=1.15", optional = true }
  sphinxcontrib-apidoc = { version = ">=0.3", optional = true }
  sphinxcontrib-spelling = { version = ">=7.3", optional = true }
  # pylint
  pylint = { version = ">=2.12", optional = true }
  pyenchant = { version = ">=3.2.2", optional = true }  # if missing pylint errors b/c config
  # mypy
  mypy = { version = ">=0.931", optional = true }

  [tool.poetry.extras]
  dev = [
    "devtools", "py-devtools-builtin",
    "tox", "virtualenv",
    "rstcheck",
    "my-flake8-plugins",
    "pytest",
    "sphinx",
    "m2r2",
    "sphinx-rtd-theme",
    "sphinx-autodoc-typehints",
    "sphinxcontrib-apidoc",
    "sphinxcontrib-spelling",
    "pylint", "pyenchant",
    "mypy",
  ]
  testing = [
    "pytest",
    "pytest-xdist",
    "pytest-cov",
    "pytest-sugar",
    "pytest-randomly",
  ]
  coverage = [
    "coverage",
    "coverage-conditional-plugin",
    "diff-cover",
  ]
  docs = [
    "sphinx",
    "sphinx-autobuild",
    "m2r2",
    "sphinx-rtd-theme",
    "sphinx-autodoc-typehints",
    "sphinxcontrib-apidoc",
    "sphinxcontrib-spelling",
  ]
  pylint = ["pylint", "pyenchant"]
  mypy = ["mypy"]


# -- BLACK CONFIG ---------------------------------------------------------------------
[tool.black]
line-length = 100
exclude = "venv/"
include = '\.pyi?$'  # single quotes needed


# -- ISORT CONFIG ---------------------------------------------------------------------
[tool.isort]
profile = "black"
lines_after_imports = 2
combine_as_imports = true
skip_gitignore = true


# -- MYPY CONFIG ----------------------------------------------------------------------
[tool.mypy]
show_error_codes = true
strict_optional = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
python_version = 3.8  # CHANGE ME


# -- FLAKEHEAVEN CONFIG ----------------------------------------------------------------
# [tool.flakeheaven]
# base = ["https://raw.githubusercontent.com/Cielquan/my-flake8-plugins/v1.2.0/flakeheaven-base.toml"]
# min_python_version = "3.8"  # CHANGE ME


[tool.flakeheaven]
max_cognitive_complexity = 10
extend_select = ["B950"]



# -- PYLINT CONFIG --------------------------------------------------------------------
[tool.pylint]
  [tool.pylint.master]
  additional-builtins = "tags"

  [tool.pylint.spelling]
  spelling-dict = "en_US"
  spelling-private-dict-file = "docs/source/spelling_dict.txt"


# -- PYTEST CONFIG --------------------------------------------------------------------
[tool.pytest.ini_options]
addopts = "-ra --showlocals"
mock_use_standalone_module = true
junit_family = "xunit2"


# -- COVERAGE CONFIG ------------------------------------------------------------------
[tool.coverage]
  [tool.coverage.run]
  plugins = ["coverage_conditional_plugin"]
  branch = true
  parallel = true
  context = "static-context"
  omit = [
    "tests/*",
    "docs/*",
  ]

  [tool.coverage.paths]
  tox_combine = [
    "src/python_test_cielquan",  # CHANGE ME
    "*/.tox/*/lib/python*/site-packages/python_test_cielquan",  # CHANGE ME
    "*/.tox/pypy*/site-packages/python_test_cielquan",  # CHANGE ME
    "*/.tox\\*\\Lib\\site-packages\\python_test_cielquan",  # CHANGE ME
  ]
  local_combine = [
    "src/python_test_cielquan",  # CHANGE ME
    "*/.venv/lib/python*/site-packages/python_test_cielquan",  # CHANGE ME
    "*/.venv\\*\\Lib\\site-packages\\python_test_cielquan",  # CHANGE ME
    "*/src/python_test_cielquan",  # CHANGE ME
    "*\\src\\python_test_cielquan",  # CHANGE ME
  ]

  [tool.coverage.report]
  show_missing = true
  exclude_lines = [
    "# pragma: no cover",
    "if __name__ == ['\"]__main__['\"]:",
    "def __str__",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "if 0:",
    "if False:",
    "if TYPE_CHECKING:",
    "if MYPY:",
  ]

  [tool.coverage.html]
  show_contexts = true

  [tool.coverage.coverage_conditional_plugin]
    [tool.coverage.coverage_conditional_plugin.rules]
    # use with: # pragma: <KEY>
    py-ue-37 = "sys_version_info[0:2] != (3, 7)"
    py-lt-38 = "sys_version_info < (3, 8)"
    py-gte-38 = "sys_version_info >= (3, 8)"


# -- RSTCHECK CONFIG ------------------------------------------------------------------
[tool.rstcheck]
ignore_directives = ["mdinclude", "spelling", "click", "jira_issue"]
ignore_roles = ["repo", "issue", "pull", "user"]


# -- RUFF CONFIG ----------------------------------------------------------------------
[tool.ruff]
target-version = "py311"
line-length = 100
format = "grouped"
show-fixes = true
show-source = true
src = ["src"]
task-tags = ["TODO", "FIXME", "XXX", "NOTE", "BUG", "HACK"]
typing-modules = []
extend-exclude = [
  "*venv*/",
  "*.tox/",
  "*.nox/",
  "_backupfiles/",
  "*.bak.*"
]

select = [
  "A",   # flake8-builtins
  "ANN", # flake8-annotations
  "ARG", # flake8-unused-arguments
  "B",   # flake8-bugbear
  "BLE", # flake8-blind-except
  "C4",  # flake8-comprehensions
  "C90", # mccabe
  # "COM", # flake8-commas # black does that
  "D",   # pydocstyle
  "DJ",  # flake8-django
  "DTZ", # flake8-datetimez
  "E",   # pycodestyle
  "EM",  # flake8-errmsg
  "ERA", # flake8-eradicate
  "EXE", # flake8-executable
  "F",   # pyflakes
  "FBT", # flake8-boolean-trap # TODO: check
  "G",   # flake8-logging-format
  "I",   # isort
  "ICN", # flake8-import-conventions
  "INP", # flake8-no-pep420
  "ISC", # flake8-implicit-str-concat
  "N",   # pep8-naming
  "NPY", # NumPy-specific rules
  "PD",  # flake8-vet
  "PGH", # pygrep-hooks
  "PIE", # flake8-pie
  "PLC", # Pylint - Convention
  "PLE", # Pylint - Error
  "PLR", # Pylint - Refactor
  "PLW", # Pylint - Warning
  "PT",  # flake8-pytest-style
  "PTH", # flake8-use-pathlib
  "PYI", # flake8-pyi
  "Q",   # flake8-quotes
  "RET", # flake8-return
  "RUF", # Ruff-specific rules
  "RSE", # flake8-raise
  "S",   # flake8-bandit
  "SLF", # flake8-self
  "SIM", # flake8-simplify
  # "T10", # flake8-debugger # pre-commit hook does that
  "T20", # flake8-print
  "TCH", # flake8-type-checking
  "TID", # flake8-tidy-imports
  "TRY", # tryceratops
  "UP",  # pyupgrade
  "W",   # pycodestyle
  "YTT", # flake8-2020
]

ignore = [
  # deactivate because unwanted
  "ANN101", # type self
  "E501",  # line length
  "E731",  # forbids lambda
  "G001",  # Logging statements should not use string.format() for their first argument
  "G002",  # Logging statements should not use % formatting for their first argument
  "G003",  # Logging statements should not use + concatenation for their first argument
  "PT011", # Use match for specific exceptions in pytest.raises
  "S110",  # try-except-pass - same as SIM105[flake8-simplify]

  # # flake8-rst-docstrings
  # "RST303",  # Unknown directive type
  # "RST304",  # Unknown interpreted text role
  # # flake8-use-fstring
  # "FS003",  # f-string missing prefix | can be % string
]
unfixable = ["ERA001"]

[tool.ruff.per-file-ignores]
"tests/*" = [
  "ARG",  # unused arguments
  "S101",  # assert used
]
"__init__.py" = [
  "PLC0414",  # useless-import-alias
]

[tool.ruff.flake8-annotations]
suppress-dummy-args = true

[tool.ruff.flake8-bugbear]
extend-immutable-calls = ["fastapi.Depends", "fastapi.Query"] # CHANGE ME

[tool.ruff.flake8-builtins]
builtins-ignorelist = ["id"] # CHANGE ME

[tool.ruff.flake8-import-conventions]
extend-aliases = {typing = "t"}

[tool.ruff.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false

[tool.ruff.flake8-quotes]
avoid-escape = true # NOTE: DEFAULT

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "parents"

[tool.ruff.flake8-type-checking]
runtime-evaluated-decorators = ["attrs.define", "attrs.frozen"]
runtime-evaluated-baseclasses = ["pydantic.BaseModel"]

[tool.ruff.isort]
combine-as-imports = true
lines-after-imports = 2

[tool.ruff.mccabe]
max-complexity = 20

[tool.ruff.pep8-naming]
classmethod-decorators = ["pydantic.validator"] # CHANGE ME

[tool.ruff.pycodestyle]
ignore-overlong-task-comments = true
max-doc-length = 100

[tool.ruff.pydocstyle]
convention = "pep257"
