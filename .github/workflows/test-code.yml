# NOTE: DO NOT FORGET TO UPDATE `test-code-skip.yml` && `publish.yml` TOO !!!
---
name: Test code

env:
  _NOX_IN_CI: true
  _NOX_FORCE_COLOR: true

on: # yamllint disable-line rule:truthy
  workflow_dispatch:

  push:
    tags:
      - "!*"
    branches:
      - main
    paths:
      #: Source/Test changes
      - "src/**/*.py"
      - "tests/**/*.py"
      #: Dependency changes
      - "poetry.lock"
      - "pyproject.toml"
      #: Test config changes
      - "tox.ini"
      - "noxfile.py"
      - ".github/workflows/test-code.yml"

  pull_request:
    branches:
      - "**"
    paths:
      #: Source/Test changes
      - "src/**/*.py"
      - "tests/**/*.py"
      #: Dependency changes
      - "poetry.lock"
      - "pyproject.toml"
      #: Test config changes
      - "tox.ini"
      - "noxfile.py"
      - ".github/workflows/test-code.yml"

jobs:
  pyproject-config:
    name: Get config from pyproject.toml
    if: >
      github.event_name == 'pull_request' ||
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'push' &&
      contains(toJson(github.event.head_commit.message), '[skip ci]') == false)
    runs-on: ubuntu-latest
    outputs:
      default_py_version: ${{ steps.get-config.outputs.default_python_version }}
      test_os: ${{ steps.get-config.outputs.test_os }}
      test_py_version_win32: ${{ steps.get-config.outputs.test_py_vers_win32 }}
      test_py_version_darwin: ${{ steps.get-config.outputs.test_py_vers_darwin }}
      test_py_version_linux: ${{ steps.get-config.outputs.test_py_vers_linux }}
      test_python_versions: ${{ steps.get-config.outputs.test_python_versions }}
      test_python_version_1: ${{ steps.get-config.outputs.test_python_version_1 }}
      test_python_version_2: ${{ steps.get-config.outputs.test_python_version_2 }}
      test_python_version_3: ${{ steps.get-config.outputs.test_python_version_3 }}
      test_python_version_4: ${{ steps.get-config.outputs.test_python_version_4 }}
      test_python_version_5: ${{ steps.get-config.outputs.test_python_version_5 }}
      test_python_version_6: ${{ steps.get-config.outputs.test_python_version_6 }}
      test_python_version_7: ${{ steps.get-config.outputs.test_python_version_7 }}
      test_python_version_8: ${{ steps.get-config.outputs.test_python_version_8 }}
      test_python_version_9: ${{ steps.get-config.outputs.test_python_version_9 }}
      test_python_version_10: ${{ steps.get-config.outputs.test_python_version_10 }}
      cc_test_reporter_url: ${{ steps.get-config.outputs.reporter_url }}
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2

      - name: Install poetry
        run: |
          python -m pip install -U pip
          pip install -U 'poetry>=1'
          poetry config virtualenvs.create false
          poetry install --no-root --no-dev --extras poetry

      - name: Install dependencies
        run: |
          poetry config virtualenvs.create false
          poetry install --no-root --no-dev --extras tomlkit

      - name: Get config
        id: get-config
        shell: python
        run: |
          import tomlkit

          with open("pyproject.toml") as pyproject_file:
              PYPROJECT = tomlkit.parse(pyproject_file.read())

          conf = PYPROJECT["tool"]["_testing"]

          std_ver = conf["ci_default_python_version"]
          print(f"::set-output name=default_python_version::{std_ver}")

          test_os = {"os": [f'{os}-latest' for os in conf["ci_test_os"]]}
          print(f"::set-output name=test_os::{test_os}")

          test_ver = conf["ci_test_python_versions"]
          print(f"::set-output name=test_python_versions::{test_ver}")
          if len(test_ver) >= 1:
              print(f"::set-output name=test_python_version_1::{test_ver[0]}")
          if len(test_ver) >= 2:
              print(f"::set-output name=test_python_version_2::{test_ver[1]}")
          if len(test_ver) >= 3:
              print(f"::set-output name=test_python_version_3::{test_ver[2]}")
          if len(test_ver) >= 4:
              print(f"::set-output name=test_python_version_4::{test_ver[3]}")
          if len(test_ver) >= 5:
              print(f"::set-output name=test_python_version_5::{test_ver[4]}")
          if len(test_ver) >= 6:
              print(f"::set-output name=test_python_version_6::{test_ver[5]}")
          if len(test_ver) >= 7:
              print(f"::set-output name=test_python_version_7::{test_ver[6]}")
          if len(test_ver) >= 8:
              print(f"::set-output name=test_python_version_8::{test_ver[7]}")
          if len(test_ver) >= 9:
              print(f"::set-output name=test_python_version_9::{test_ver[8]}")
          if len(test_ver) >= 10:
              print(f"::set-output name=test_python_version_10::{test_ver[9]}")

          win_test_ver = conf["toxenv_python_versions_win32"]
          print(f"::set-output name=test_py_vers_win32::{win_test_ver}")
          mac_test_ver = conf["toxenv_python_versions_darwin"]
          print(f"::set-output name=test_py_vers_darwin::{mac_test_ver}")
          nix_test_ver = conf["toxenv_python_versions_linux"]
          print(f"::set-output name=test_py_vers_linux::{nix_test_ver}")

          cc_url = "https://codeclimate.com/downloads/test-reporter/test-reporter-"
          reporter_url = cc_url + conf["cc_test_reporter_version"]
          print(f"::set-output name=reporter_url::{reporter_url}")

  set-git-env-vars:
    name: Set GIT_COMMIT_SHA and GIT_BRANCH
    needs: pyproject-config
    # yamllint disable-line rule:line-length
    #: Based on: https://github.com/paambaati/codeclimate-action/blob/26b4414184dd6928c7c8b474732a2dce632925c9/src/main.ts#L39
    runs-on: ubuntu-latest
    outputs:
      GIT_COMMIT_SHA: ${{ steps.set-GIT_COMMIT_SHA.outputs.GIT_COMMIT_SHA }}
      GIT_BRANCH: ${{ steps.set-GIT_BRANCH.outputs.GIT_BRANCH }}
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ needs.pyproject-config.outputs.default_py_version }}

      - name: Get merge commit message
        id: merge-commit-msg
        shell: bash
        run: echo "::set-output name=CMT_MSG::$(git log --oneline -n 1 --format='%s')"
        if: github.event_name == 'pull_request'

      - name: Extract commit sha from merge commit msg
        id: merge-commit-sha
        shell: python
        run: |
          import re
          import sys

          sha = re.fullmatch(
              r"^Merge ([a-z0-9]{40}) into [a-z0-9]{40}$",
              "${{ steps.merge-commit-msg.outputs.CMT_MSG }}"
          )

          if not sha:
              sys.exit(1)
          print(f"::set-output name=COMMIT_SHA::{sha.group(1)}")
        if: github.event_name == 'pull_request'

      - name: Set GIT_COMMIT_SHA
        id: set-GIT_COMMIT_SHA
        shell: python
        run: |
          if "${{ github.event_name }}" == "pull_request":
              sha = "${{ steps.merge-commit-sha.outputs.COMMIT_SHA }}"
              print(f"::set-output name=GIT_COMMIT_SHA::{sha}")
          else:
              print("::set-output name=GIT_COMMIT_SHA::${{ github.sha }}")

      - name: Set GIT_BRANCH
        id: set-GIT_BRANCH
        shell: python
        run: |
          branch = "${{ github.ref }}".replace("refs/heads/", "")

          if "${{ github.event_name }}" == "pull_request":
              head_ref = "${{ github.head_ref }}"
              if head_ref:
                  branch = head_ref

          print(f"::set-output name=GIT_BRANCH::{branch}")

  notify-code-climate:
    name: Notify code-climate
    needs: pyproject-config
    runs-on: ubuntu-latest
    env:
      CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
      CC_TEST_REPORTER_URL: ${{ needs.pyproject-config.outputs.cc_test_reporter_url }}
    steps:
      - name: Download reporter
        shell: bash
        run: |
          curl -L $CC_TEST_REPORTER_URL > ./cc-test-reporter
          chmod +x ./cc-test-reporter

      - name: Upload reporter binary as artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ runner.os }}_cc-test-reporter
          path: ./cc-test-reporter

      - name: 'Run "cc-test-reporter before-build"'
        shell: bash
        run: ./cc-test-reporter before-build -d

  package-tests:
    name: nox / package / ${{ matrix.os }}
    needs: pyproject-config
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.pyproject-config.outputs.test_os) }}
    outputs:
      ubuntu-success: ${{ steps.set-result.outputs.ubuntu-success }}
      macos-success: ${{ steps.set-result.outputs.macos-success }}
      windows-success: ${{ steps.set-result.outputs.windows-success }}
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ needs.pyproject-config.outputs.default_py_version }}

      - name: Install poetry
        run: |
          python -m pip install -U pip
          pip install -U 'poetry>=1'
          poetry config virtualenvs.create false
          poetry install --no-root --no-dev --extras poetry

      - name: Install dependencies
        run: |
          poetry config virtualenvs.create false
          poetry install --no-dev --extras dev_nox

      - name: Generate tox envs via nox
        run: >
          nox --forcecolor --session package
          -- TOX_ARGS=-vv,--skip-missing-interpreters,false NOX_ARGS=-v,--install-only

      - name: Run tox envs via nox
        id: test
        run: nox --forcecolor --session package -- skip_install

      - name: Set result variable
        id: set-result
        shell: python
        run: |
          import sys

          if "${{ steps.test.outcome }}" != "success":
              sys.exit(1)
          else:
              if "${{ matrix.os }}" == "ubuntu-latest":
                  print("::set-output name=ubuntu-success::true")
              elif "${{ matrix.os }}" == "macos-latest":
                  print("::set-output name=macos-success::true")
              elif "${{ matrix.os }}" == "windows-latest":
                  print("::set-output name=windows-success::true")

  test-code:
    name: nox / test_code / ${{ matrix.os }}
    needs: [notify-code-climate, package-tests, pyproject-config]
    if: >
      github.event_name == 'pull_request' ||
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'push' &&
      contains(toJson(github.event.head_commit.message), '[skip ci]') == false)
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.pyproject-config.outputs.test_os) }}
    env:
      PYTEST_ADDOPTS: -v -v -ra --showlocals
      PYTEST_XDIST_N: 0
    steps:
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ needs.pyproject-config.outputs.default_py_version }}

      - name: Abort if package test failed
        shell: python
        run: |
          import sys

          if (
              "${{ matrix.os }}" == "ubuntu-latest"
              and "${{ needs.package-tests.outputs.ubuntu-success }}" == "true"
          ):
              sys.exit(0)
          elif (
              "${{ matrix.os }}" == "macos-latest"
              and "${{ needs.package-tests.outputs.macos-success }}" == "true"
          ):
              sys.exit(0)
          elif (
              "${{ matrix.os }}" == "windows-latest"
              and "${{ needs.package-tests.outputs.windows-success }}" == "true"
          ):
              sys.exit(0)
          else:
              sys.exit(1)

      - uses: actions/checkout@v2

      - name: Install poetry
        run: |
          python -m pip install -U pip
          pip install -U 'poetry>=1'
          poetry config virtualenvs.create false
          poetry install --no-root --no-dev --extras poetry

      - name: Install dependencies
        run: |
          poetry config virtualenvs.create false
          poetry install --no-dev --extras dev_nox

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ needs.pyproject-config.outputs.test_python_version_1 }}
        if: needs.pyproject-config.outputs.test_python_version_1

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ needs.pyproject-config.outputs.test_python_version_2 }}
        if: needs.pyproject-config.outputs.test_python_version_2

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ needs.pyproject-config.outputs.test_python_version_3 }}
        if: needs.pyproject-config.outputs.test_python_version_3

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ needs.pyproject-config.outputs.test_python_version_4 }}
        if: needs.pyproject-config.outputs.test_python_version_4

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ needs.pyproject-config.outputs.test_python_version_5 }}
        if: needs.pyproject-config.outputs.test_python_version_5

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ needs.pyproject-config.outputs.test_python_version_6 }}
        if: needs.pyproject-config.outputs.test_python_version_6

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ needs.pyproject-config.outputs.test_python_version_7 }}
        if: needs.pyproject-config.outputs.test_python_version_7

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ needs.pyproject-config.outputs.test_python_version_8 }}
        if: needs.pyproject-config.outputs.test_python_version_8

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ needs.pyproject-config.outputs.test_python_version_9 }}
        if: needs.pyproject-config.outputs.test_python_version_9

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ needs.pyproject-config.outputs.test_python_version_10 }}
        if: needs.pyproject-config.outputs.test_python_version_10

      - name: Set python version hash
        shell: bash
        run: echo "PY_VER_SHA=$(python -VV | sha256sum | cut -d' ' -f1)" >> $GITHUB_ENV

      - name: Load tox-env from cache
        uses: actions/cache@v2
        id: cache
        with:
          path: .tox/${{ runner.os }}
          key: >
            test-code
            | tox-env
            | ${{ runner.os }}
            | ${{ env.PY_VER_SHA }}
            | ${{ hashFiles('noxfile.py') }}
            | ${{ hashFiles('tox.ini') }}
            | ${{ hashFiles('**/poetry.lock') }}

      - name: Ensure cache is healthy (windows)
        if: steps.cache.outputs.cache-hit == 'true' && matrix.os == 'windows-latest'
        shell: bash
        run: timeout 10s .tox/.package/Scripts/pip --version || rm -rf .tox

      - name: Ensure cache is healthy (unix)
        if: steps.cache.outputs.cache-hit == 'true' && matrix.os != 'windows-latest'
        shell: bash
        run: timeout 10s .tox/.package/bin/pip --version || rm -rf .tox

      - name: Generate tox envs via nox
        run: >
          nox --forcecolor --session test_code
          -- TOX_ARGS=-vv,--skip-missing-interpreters,false NOX_ARGS=-v,--install-only

      - name: Run tox envs via nox
        run: nox --forcecolor --session test_code -- skip_install

      - name: Set archive name
        id: set-archive-name
        shell: python
        run: |
          import sys
          py_vers = {
              "win32": "${{ needs.pyproject-config.outputs.test_py_version_win32 }}",
              "darwin": "${{ needs.pyproject-config.outputs.test_py_version_darwin }}",
              "linux": "${{ needs.pyproject-config.outputs.test_py_version_linux }}",
          }
          print(f"::set-output name=archive_name::{py_vers[sys.platform]}")

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v2
        with:
          # yamllint disable-line rule:line-length
          name: coverage-${{ matrix.os }}-${{ steps.set-archive-name.outputs.archive_name }}
          path: .coverage_cache/.coverage*
          if-no-files-found: error

      - name: Upload junit artifacts
        uses: actions/upload-artifact@v2
        with:
          # yamllint disable-line rule:line-length
          name: junit-${{ matrix.os }}-${{ steps.set-archive-name.outputs.archive_name }}
          path: .junit_cache/junit*.xml
          if-no-files-found: error

  merge-coverage:
    name: nox / coverage_merge
    needs: [test-code, pyproject-config]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ needs.pyproject-config.outputs.default_py_version }}

      - name: Install poetry
        run: |
          python -m pip install -U pip
          pip install -U 'poetry>=1'
          poetry config virtualenvs.create false
          poetry install --no-root --no-dev --extras poetry

      - name: Install dependencies
        run: |
          poetry config virtualenvs.create false
          poetry install --no-dev --extras dev_nox

      - name: Generate tox env via nox
        run: >
          nox --forcecolor --session coverage_merge
          -- TOX_ARGS=-vv,--skip-missing-interpreters,false NOX_ARGS=-v,--install-only

      - name: Download coverage artifacts
        uses: actions/download-artifact@v2
        with:
          path: coverage-artifacts/

      - name: Move coverage files to .coverage_cache/
        shell: python
        run: |
          from pathlib import Path
          import shutil

          artifact_dir = Path("coverage-artifacts")
          cov_dir = Path(".coverage_cache")
          cov_dir.mkdir()

          for coverage_file in artifact_dir.glob("*/.coverage*"):
              destination = cov_dir / f".coverage.{coverage_file.parent.name[9:]}"
              print(f"{coverage_file} copy to {destination}")
              shutil.copy(str(coverage_file), str(destination))

      - name: Run tox env via nox
        run: nox --forcecolor --session coverage_merge -- skip_install

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v2
        with:
          name: coverage-merged
          path: |
            .coverage_cache/coverage.xml
            .coverage_cache/.coverage
            .coverage_cache/htmlcov/
          if-no-files-found: error

  report-coverage:
    name: nox / coverage_report
    needs: [merge-coverage, pyproject-config]
    runs-on: ubuntu-latest
    env:
      MIN_COVERAGE: 100
      MIN_DIFF_COVERAGE: 100
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ needs.pyproject-config.outputs.default_py_version }}

      - name: Install poetry
        run: |
          python -m pip install -U pip
          pip install -U 'poetry>=1'
          poetry config virtualenvs.create false
          poetry install --no-root --no-dev --extras poetry

      - name: Install dependencies
        run: |
          poetry config virtualenvs.create false
          poetry install --no-dev --extras dev_nox

      - name: Generate tox env via nox
        run: >
          nox --forcecolor --session coverage_report
          -- TOX_ARGS=-vv,--skip-missing-interpreters,false NOX_ARGS=-v,--install-only

      - name: Download coverage-merged artifact
        uses: actions/download-artifact@v2
        with:
          name: coverage-merged
          path: .coverage_cache/

      - name: Fetch origin/main
        #: https://github.com/Bachmann1234/diff_cover#troubleshooting
        run: git fetch --no-tags origin main:refs/remotes/origin/main

      - name: Run tox env via nox
        run: nox --forcecolor --session coverage_report -- skip_install

  push-coverage-to-code-climate:
    name: Push coverage to code-climate
    needs: [merge-coverage, set-git-env-vars, pyproject-config]
    runs-on: ubuntu-latest
    env:
      CI_NAME: Github Actions
      CI_BUILD_ID: ${{ github.run_id }}
      CI_BUILD_URL: |
        https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
      CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
      CC_TEST_REPORTER_URL: ${{ needs.pyproject-config.outputs.cc_test_reporter_url }}
      GIT_COMMIT_SHA: ${{ needs.set-git-env-vars.outputs.GIT_COMMIT_SHA }}
      GIT_BRANCH: ${{ needs.set-git-env-vars.outputs.GIT_BRANCH }}
    steps:
      - uses: actions/checkout@v2

      - name: Download reporter binary artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ runner.os }}_cc-test-reporter
          path: ./cc-test-reporter

      - name: Ensure healthy binary, else download new
        shell: bash
        run: |
          timeout 10s ./cc-test-reporter --version || \
            (rm -rf cc-test-reporter && \
            curl -L $CC_TEST_REPORTER_URL > ./cc-test-reporter && \
            chmod +x ./cc-test-reporter)

      - name: Download coverage-merged artifact
        uses: actions/download-artifact@v2
        with:
          name: coverage-merged
          path: .coverage_cache/

      - name: Format coverage data
        shell: bash
        run: |
          ./cc-test-reporter --debug format-coverage \
            .coverage_cache/coverage.xml \
            --input-type coverage.py \
            --output .coverage_cache/code-climate.json

      - name: Upload coverage data
        shell: bash
        run: |
          ./cc-test-reporter --debug upload-coverage \
            --input .coverage_cache/code-climate.json

  set-status:
    name: Set status on commit
    needs: [test-code, report-coverage, push-coverage-to-code-climate, set-git-env-vars]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Process total success
        id: total-success
        shell: bash
        run: |
          tests=${{ needs.test-code.result }}
          cov=${{ needs.report-coverage.result }}
          send_cov=${{ needs.push-coverage-to-code-climate.result }}

          if [[ $tests == 'success' ]] && [[ $cov == 'success' ]] &&
          [[ $send_cov == 'success' ]]; then
            state=success
          else
            state=failure
          fi
          echo -e "::set-output name=state::${state}"
        if: >
          needs.test-code.result != 'skipped' &&
          needs.report-coverage.result != 'skipped' &&
          needs.push-coverage-to-code-climate.result != 'skipped' &&
          needs.set-git-env-vars.result != 'skipped'

      - name: Get repo dir name
        id: repo-dir
        shell: bash
        run: |
          repo_dir=${GITHUB_REPOSITORY#${{ github.repository_owner }}/}
          echo "::set-output name=repo-dir::$repo_dir"
        if: steps.total-success.outcome == 'success'

      - name: Set status via gihub API
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/{owner}/{repo}/statuses/{sha}
          owner: ${{ github.repository_owner }}
          repo: ${{ steps.repo-dir.outputs.repo-dir }}
          sha: ${{ needs.set-git-env-vars.outputs.GIT_COMMIT_SHA }}
          state: ${{ steps.total-success.outputs.state }}
          target_url: |
            "https://github.com/${{ github.repository }}/runs/${{ github.run_id }}"
          description: CI pipeline for testing code
          context: ci-test-code
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: steps.repo-dir.outcome == 'success'
