# NOTE: DO NOT FORGET TO UPDATE `test-code-skip.yml` && `test-code.yml` TOO !!!
---
name: Release new version

# What this workflow does:
# 1. Check user input
# 2. Load testing config from pyproject.toml
# 3. Check state on commit via API -> all CI succeeded?
# 4. Run test suit of prior release
# 5. If old test suit failed check if Breaking Changes are mentioned in Changelog
# 6. Publish
#   a) Install dependencies
#   b) Set git user
#   c) Run prep_release.py script
#   d) Build and publish via poetry
#   e) Create GH release with build artifacts

env:
  _NOX_IN_CI: true
  _NOX_FORCE_COLOR: true

on: # yamllint disable-line rule:truthy
  workflow_dispatch:
    inputs:
      releaseStep:
        description: >
          Version increase type: major/breaking | minor/feature | patch/bugfix
        required: true
      # preRelease:
      #   description: 'Pre-release level: alpha|a|beta|b|rc'
      #   required: false

jobs:
  check-input:
    name: Check given inputs
    runs-on: ubuntu-latest
    outputs:
      pre_release: ${{ steps.set-std-ver-args.outputs.pre_release }}
      first_release: ${{ steps.first-release.outputs.first_release }}
      release_script_args: ${{ steps.set-release-script-args.outputs.args }}
      release_step: ${{ steps.release-step.outputs.step }}
    steps:
      - uses: actions/setup-python@v2

      - name: Check releaseStep
        id: release-step
        shell: python
        run: |
          import sys

          version_step = "${{ github.event.inputs.releaseStep }}"
          types = ("major", "breaking", "minor", "feature", "patch", "bugfix")
          if version_step not in types:
              print(f"'{version_step}' is not a valid release type.")
              sys.exit(1)
          print(f"::set-output name=step::{version_step}")

      # - name: Check preRelease
      #   shell: python
      #   run: |
      #     import sys

      #     pre_release_stage = "${{ github.event.inputs.preRelease }}"

      #     if not pre_release_stage:
      #         sys.exit(0)

      #     allowed_pre_release_stage = ("alpha", "a", "beta", "b", "rc")

      #     pre_release = False

      #     if pre_release_stage:
      #         if pre_release_stage not in allowed_pre_release_stage:
      #             print(f"'{pre_release_stage}' is not allowed.")
      #             sys.exit(1)

      - uses: actions/checkout@v2

      - name: Check if first release
        id: first-release
        run: >
          git fetch --tags

          first_release=$(git tag | grep -qoE "v[0-9]+\.[0-9]+\.[0-9]+"
          && echo False || echo True)

          echo "::set-output name=first_release::${first_release}"

      - name: Set prep_release.py args
        id: set-release-script-args
        shell: python
        run: |
          args = []

          release_step = "${{ github.event.inputs.releaseStep }}"
          if release_step:
              args += [release_step]

          if ${{ steps.first-release.outputs.first_release }} is True:
              args += ["--first-release"]

          args_str = ' '.join(args)
          print(args_str)
          print(f"::set-output name=args::{args_str}")

  pyproject-config:
    name: Get config from pyproject.toml
    needs: check-input
    runs-on: ubuntu-latest
    outputs:
      project_name: ${{ steps.get-config.outputs.project_name }}
      last_version: ${{ steps.get-config.outputs.last_version }}
      default_py_version: ${{ steps.get-config.outputs.default_python_version }}
      test_os: ${{ steps.get-config.outputs.test_os }}
      test_python_versions: ${{ steps.get-config.outputs.test_python_versions }}
      test_python_version_1: ${{ steps.get-config.outputs.test_python_version_1 }}
      test_python_version_2: ${{ steps.get-config.outputs.test_python_version_2 }}
      test_python_version_3: ${{ steps.get-config.outputs.test_python_version_3 }}
      test_python_version_4: ${{ steps.get-config.outputs.test_python_version_4 }}
      test_python_version_5: ${{ steps.get-config.outputs.test_python_version_5 }}
      test_python_version_6: ${{ steps.get-config.outputs.test_python_version_6 }}
      test_python_version_7: ${{ steps.get-config.outputs.test_python_version_7 }}
      test_python_version_8: ${{ steps.get-config.outputs.test_python_version_8 }}
      test_python_version_9: ${{ steps.get-config.outputs.test_python_version_9 }}
      test_python_version_10: ${{ steps.get-config.outputs.test_python_version_10 }}
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2

      - name: Install poetry
        run: |
          python -m pip install -U pip
          pip install -U 'poetry>=1'
          poetry config virtualenvs.create false
          poetry install --no-root --no-dev --extras poetry

      - name: Install dependencies
        run: |
          poetry config virtualenvs.create false
          poetry install --no-root --no-dev --extras tomlkit

      - name: Get config
        id: get-config
        shell: python
        run: |
          import tomlkit

          with open("pyproject.toml") as pyproject_file:
              PYPROJECT = tomlkit.parse(pyproject_file.read())

          last_version = PYPROJECT["tool"]["poetry"]["version"]
          print(f"::set-output name=last_version::{last_version}")

          project_name = PYPROJECT["tool"]["poetry"]["name"]
          print(f"::set-output name=project_name::{project_name}")

          conf = PYPROJECT["tool"]["_testing"]

          std_ver = conf["ci_default_python_version"]
          print(f"::set-output name=default_python_version::{std_ver}")

          test_os = {"os": [f'{os}-latest' for os in conf["ci_test_os"]]}
          print(f"::set-output name=test_os::{test_os}")

          test_ver = conf["ci_test_python_versions"]
          print(f"::set-output name=test_python_versions::{test_ver}")
          if len(test_ver) >= 1:
              print(f"::set-output name=test_python_version_1::{test_ver[0]}")
          if len(test_ver) >= 2:
              print(f"::set-output name=test_python_version_2::{test_ver[1]}")
          if len(test_ver) >= 3:
              print(f"::set-output name=test_python_version_3::{test_ver[2]}")
          if len(test_ver) >= 4:
              print(f"::set-output name=test_python_version_4::{test_ver[3]}")
          if len(test_ver) >= 5:
              print(f"::set-output name=test_python_version_5::{test_ver[4]}")
          if len(test_ver) >= 6:
              print(f"::set-output name=test_python_version_6::{test_ver[5]}")
          if len(test_ver) >= 7:
              print(f"::set-output name=test_python_version_7::{test_ver[6]}")
          if len(test_ver) >= 8:
              print(f"::set-output name=test_python_version_8::{test_ver[7]}")
          if len(test_ver) >= 9:
              print(f"::set-output name=test_python_version_9::{test_ver[8]}")
          if len(test_ver) >= 10:
              print(f"::set-output name=test_python_version_10::{test_ver[9]}")

  check-ci-status:
    name: Check CI status on commit
    needs: [pyproject-config]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ needs.pyproject-config.outputs.default_py_version }}

      - name: Get repo dir name
        id: repo-dir
        shell: bash
        run: |
          repo_dir=${GITHUB_REPOSITORY#${{ github.repository_owner }}/}
          echo "::set-output name=repo-dir::$repo_dir"

      - name: Get status via gihub API
        id: get-status
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/{owner}/{repo}/commits/{ref}/status
          accept: application/vnd.github.v3+json
          owner: ${{ github.repository_owner }}
          repo: ${{ steps.repo-dir.outputs.repo-dir }}
          ref: ${{ github.sha }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check CI status
        run: exit 0
  # yamllint disable-line rule:comments-indentation
  # shell: python
  # run: |
  #   import json
  #   import sys

  #   status_json = json.loads("""${{ steps.get-status.outputs.data }}""")

  #   if status_json["state"] != "success":
  #       print("The CI pipeline state of this commit is not 'success'.")
  #       sys.exit(1)

  #   ci_that_ran = []
  #   for ci in status_json["statuses"]:
  #       ci_that_ran.append(ci["context"])

  #   needed_ci = ("ci-code-quality", "ci-test-code", "ci-test-docs")
  #   for ci in needed_ci:
  #       if ci not in ci_that_ran:
  #           print(
  #               "Not all CI pipelines ran. Please make sure all CI pipelines "
  #               f"ran successfully and try again.\nNeeded CI: {needed_ci}"
  #           )
  #           sys.exit(1)

  old-test-code:
    name: (old tests) nox / test_code / ${{ matrix.os }}
    needs: [check-ci-status, pyproject-config, check-input]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix: ${{ fromJson(needs.pyproject-config.outputs.test_os) }}
    env:
      PYTEST_ADDOPTS: -v -v -ra --showlocals
      PYTEST_XDIST_N: 0
    steps:
      - uses: actions/checkout@v2
        if: needs.check-input.outputs.first_release != 'False'

      - name: Checkout repo at last tag
        uses: actions/checkout@v2
        with:
          path: tests-last-version
          ref: v${{ needs.pyproject-config.outputs.last_version }}
        if: needs.check-input.outputs.first_release != 'False'

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ needs.pyproject-config.outputs.default_py_version }}
        if: needs.check-input.outputs.first_release != 'False'

      - name: Install poetry
        run: |
          python -m pip install -U pip
          pip install -U 'poetry>=1'
          poetry config virtualenvs.create false
          poetry install --no-root --no-dev --extras poetry
        if: needs.check-input.outputs.first_release != 'False'

      - name: Install dependencies
        run: |
          poetry config virtualenvs.create false
          poetry install --no-root --no-dev --extras dev_nox
        if: needs.check-input.outputs.first_release != 'False'

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ needs.pyproject-config.outputs.test_python_version_1 }}
        if: >
          needs.pyproject-config.outputs.test_python_version_1
          && needs.check-input.outputs.first_release != 'False'

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ needs.pyproject-config.outputs.test_python_version_2 }}
        if: >
          needs.pyproject-config.outputs.test_python_version_2
          && needs.check-input.outputs.first_release != 'False'

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ needs.pyproject-config.outputs.test_python_version_3 }}
        if: >
          needs.pyproject-config.outputs.test_python_version_3
          && needs.check-input.outputs.first_release != 'False'

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ needs.pyproject-config.outputs.test_python_version_4 }}
        if: >
          needs.pyproject-config.outputs.test_python_version_4
          && needs.check-input.outputs.first_release != 'False'

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ needs.pyproject-config.outputs.test_python_version_5 }}
        if: >
          needs.pyproject-config.outputs.test_python_version_5
          && needs.check-input.outputs.first_release != 'False'

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ needs.pyproject-config.outputs.test_python_version_6 }}
        if: >
          needs.pyproject-config.outputs.test_python_version_6
          && needs.check-input.outputs.first_release != 'False'

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ needs.pyproject-config.outputs.test_python_version_7 }}
        if: >
          needs.pyproject-config.outputs.test_python_version_7
          && needs.check-input.outputs.first_release != 'False'

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ needs.pyproject-config.outputs.test_python_version_8 }}
        if: >
          needs.pyproject-config.outputs.test_python_version_8
          && needs.check-input.outputs.first_release != 'False'

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ needs.pyproject-config.outputs.test_python_version_9 }}
        if: >
          needs.pyproject-config.outputs.test_python_version_9
          && needs.check-input.outputs.first_release != 'False'

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ needs.pyproject-config.outputs.test_python_version_10 }}
        if: >
          needs.pyproject-config.outputs.test_python_version_10
          && needs.check-input.outputs.first_release != 'False'

      - name: Generate tox envs via nox
        run: >
          nox --forcecolor --session test_code
          -- TOX_ARGS=-vv,--skip-missing-interpreters,false NOX_ARGS=-v,--install-only
        if: needs.check-input.outputs.first_release != 'False'

      - name: Run tox envs via nox
        run: |
          nox --forcecolor --session test_code -- skip_install tests-last-version/tests
        env:
          MIN_COVERAGE: 0
        if: needs.check-input.outputs.first_release != 'False'

  check-breaking-change-notes:
    name: Check for missing BREAKING CHANGES release notes
    needs: [old-test-code, check-input, pyproject-config]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - id: first-step
        uses: actions/checkout@v2
        if: needs.old-test-code.result != 'success'

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ needs.pyproject-config.outputs.default_py_version }}
        if: steps.first-step.outcome == 'success'

      - name: Get repo dir name
        id: repo-dir
        shell: bash
        run: |
          repo_dir=${GITHUB_REPOSITORY#${{ github.repository_owner }}/}
          echo "::set-output name=repo-dir::$repo_dir"
        if: steps.first-step.outcome == 'success'

      - name: Check for BREAKING CHANGES in release notes
        id: check-notes
        continue-on-error: true
        shell: python
        run: |
          import sys

          with open("CHANGELOG.md") as changelog_file:
              changelog = changelog_file.read()

          start_check = False
          for line in changelog.split("\n"):
              if line.startswith("## Unreleased"):
                  start_check = True
                  continue

              if start_check:
                  if "BREAKING CHANGES" in line:
                      sys.exit(0)
                  if line.startswith("##"):
                      sys.exit(1)

          sys.exit(1)
        if: steps.first-step.outcome == 'success'

      - name: Check releaseStep
        id: check-step
        continue-on-error: true
        shell: python
        run: |
          import sys

          version_step = "${{ needs.check-input.outputs.release_step }}"
          if version_step not in ("major", "breaking"):
              sys.exit(1)
          sys.exit(0)
        if: steps.first-step.outcome == 'success'

      - name: Get commit comments
        id: get-comments
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/{owner}/{repo}/commits/{commit_sha}/comments
          accept: application/vnd.github.v3+json
          owner: ${{ github.repository_owner }}
          repo: ${{ steps.repo-dir.outputs.repo-dir }}
          commit_sha: ${{ github.sha }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: >
          (steps.check-step.outcome != 'success' ||
          steps.check-notes.outcome != 'success') &&
          steps.repo-dir.outcome == 'success'

      - name: Check (for) comment from prior run
        id: check-comments
        continue-on-error: true
        shell: python
        run: |
          import json
          import sys

          comments_json = json.loads("""${{ steps.get-comments.outputs.data }}""")

          for comment in comments_json:
              if comment["user"]["login"] == "github-actions[bot]":
                  if "publish pipeline ran here" in comment["body"]:
                      sys.exit(0)
          sys.exit(1)
        if: steps.get-comments.outcome == 'success'

      - name: Set commit comment
        id: set-comment
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/{owner}/{repo}/commits/{commit_sha}/comments
          accept: application/vnd.github.v3+json
          owner: ${{ github.repository_owner }}
          repo: ${{ steps.repo-dir.outputs.repo-dir }}
          commit_sha: ${{ github.sha }}
          body: |
            publish pipeline ran here
            ${{ steps.check-comments.outputs.comment }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: >
          steps.check-comments.outcome != 'success' &&
          steps.repo-dir.outcome == 'success'

      - name: Exit if comment was set
        run: exit 1
        if: steps.set-comment.outcome == 'success'

  publish:
    needs: [check-breaking-change-notes, check-input, pyproject-config]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Abort if tests failed
        run: exit 1
        if: needs.check-breaking-change-notes.result != 'success'

      - uses: actions/checkout@v2
        with:
          persist-credentials: false

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ needs.pyproject-config.outputs.default_py_version }}

      - name: Install poetry
        run: |
          python -m pip install -U pip
          pip install -U 'poetry>=1'
          poetry config virtualenvs.create false
          poetry install --no-root --no-dev --extras poetry

      - name: Set git user
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "github-actions"

      - name: Run release script
        run: python prep_release.py ${{ needs.check-input.outputs.release_script_args }}

      - name: Set new tag as ENVVAR
        id: new-tag
        shell: bash
        run: |
          tag=$(git describe --tags --abbrev=0)
          echo "::set-output name=tag::$tag"
          version=$(echo $tag | sed 's/v//')
          echo "::set-output name=version::$version"

      - name: Push tag and commit to main
        # yamllint disable-line rule:line-length
        run: git push "https://${{ github.repository_owner }}:$GITHUB_TOKEN@github.com/${{ github.repository }}.git" --follow-tags
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}

      - name: Build package
        run: poetry build --ansi

      - name: Publish package on test.PyPI
        # CHANGE ME: remove current upload to test.pypi
        env:
          POETRY_REPOSITORIES_TEST_URL: ${{ secrets.POETRY_REPOSITORIES_TEST_URL }}
          # POETRY_HTTP_BASIC_TEST_USERNAME: |
          #   ${{ secrets.POETRY_HTTP_BASIC_TEST_USERNAME }}
          # POETRY_HTTP_BASIC_TEST_PASSWORD: |
          #   ${{ secrets.POETRY_HTTP_BASIC_TEST_PASSWORD }}
          POETRY_PYPI_TOKEN_TEST: |
            ${{ secrets.TEST_PYPI_TOKEN }}
        run: poetry publish -r test --ansi
        # yamllint disable-line rule:comments-indentation
        # env:
        # # yamllint disable-line rule:comments-indentation
        # POETRY_HTTP_BASIC_PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}
        # POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        # yamllint disable-line rule:comments-indentation
        # run: poetry publish --ansi

      - name: Create GH Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.new-tag.outputs.tag }}
          release_name: ${{ steps.new-tag.outputs.tag }}
          # yamllint disable-line rule:line-length
          body: "see [Changelog](https://github.com/${{ github.repository }}/blob/${{ steps.new-tag.outputs.tag }}/CHANGELOG.md)"
          draft: false
          prerelease: ${{ needs.check-input.outputs.pre_release }}

      - name: Upload tarball
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          # yamllint disable-line rule:line-length
          asset_path: dist/${{ needs.pyproject-config.outputs.project_name }}-${{ steps.new-tag.outputs.version }}.tar.gz
          # yamllint disable-line rule:line-length
          asset_name: ${{ needs.pyproject-config.outputs.project_name }}-${{ steps.new-tag.outputs.version }}.tar.gz
          asset_content_type: application/gzip

      - name: Upload wheel
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          # yamllint disable-line rule:line-length
          asset_path: dist/${{ needs.pyproject-config.outputs.project_name }}-${{ steps.new-tag.outputs.version }}-py3-none-any.whl
          # yamllint disable-line rule:line-length
          asset_name: ${{ needs.pyproject-config.outputs.project_name }}-${{ steps.new-tag.outputs.version }}-py3-none-any.whl
          asset_content_type: application/zip
