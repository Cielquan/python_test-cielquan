---
name: Code qualitiy

env:
  _NOX_IN_CI: true
  _NOX_FORCE_COLOR: true

on: # yamllint disable-line rule:truthy
  workflow_dispatch:

  push:
    tags:
      - "!*"
    branches:
      - main

  pull_request:
    branches:
      - "**"

jobs:
  pyproject-config:
    name: Get default python version from pyproject.toml
    if: >
      github.event_name == 'pull_request' ||
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'push' &&
      contains(toJson(github.event.head_commit.message), '[skip ci]') == false)
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-default-version.outputs.default_python_version }}
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2

      - name: Install poetry
        run: |
          python -m pip install -U pip
          pip install -U 'poetry>=1'
          poetry config virtualenvs.create false
          poetry install --no-root --no-dev --extras poetry

      - name: Install dependencies
        run: |
          poetry config virtualenvs.create false
          poetry install --no-root --no-dev --extras tomlkit

      - name: Get default version
        id: get-default-version
        shell: python
        run: |
          import tomlkit

          with open("pyproject.toml") as pyproject_file:
              PYPROJECT = tomlkit.parse(pyproject_file.read())

          ver = PYPROJECT["tool"]["_testing"]["ci_default_python_version"]
          print(f"::set-output name=default_python_version::{ver}")

  pre-commit:
    name: nox / pre_commit
    needs: pyproject-config
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ needs.pyproject-config.outputs.version }}

      - name: Install poetry
        run: |
          python -m pip install -U pip
          pip install -U 'poetry>=1'
          poetry config virtualenvs.create false
          poetry install --no-root --no-dev --extras poetry

      - name: Install dependencies
        run: |
          poetry config virtualenvs.create false
          poetry install --no-root --no-dev --extras dev_nox

      - name: Set python version hash
        shell: bash
        run: echo "PY_VER_SHA=$(python -VV | sha256sum | cut -d' ' -f1)" >> $GITHUB_ENV

      - name: Load pre-commit/poetry cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/pre-commit
            ~/.cache/pypoetry
          key: >
            pre-commit
            | ${{ env.PY_VER_SHA }}
            | ${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Generate tox env via nox
        run: >
          nox --forcecolor --session pre_commit
          -- TOX_ARGS=-vv,--skip-missing-interpreters,false NOX_ARGS=-v,--install-only

      - name: Run tox env via nox
        run: nox --forcecolor --session pre_commit -- skip_install

  set-git-env-vars:
    name: Set GIT_COMMIT_SHA
    needs: pyproject-config
    # yamllint disable-line rule:line-length
    #: Based on: https://github.com/paambaati/codeclimate-action/blob/26b4414184dd6928c7c8b474732a2dce632925c9/src/main.ts#L39
    runs-on: ubuntu-latest
    outputs:
      GIT_COMMIT_SHA: ${{ steps.set-GIT_COMMIT_SHA.outputs.GIT_COMMIT_SHA }}
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ needs.pyproject-config.outputs.version }}

      - name: Get merge commit message
        id: merge-commit-msg
        shell: bash
        run: echo "::set-output name=CMT_MSG::$(git log --oneline -n 1 --format='%s')"
        if: github.event_name == 'pull_request'

      - name: Extract commit sha from merge commit msg
        id: merge-commit-sha
        shell: python
        run: |
          import re
          import sys

          sha = re.fullmatch(
              r"^Merge ([a-z0-9]{40}) into [a-z0-9]{40}$",
              "${{ steps.merge-commit-msg.outputs.CMT_MSG }}"
          )

          if not sha:
              sys.exit(1)
          print(f"::set-output name=COMMIT_SHA::{sha.group(1)}")
        if: github.event_name == 'pull_request'

      - name: Set GIT_COMMIT_SHA
        id: set-GIT_COMMIT_SHA
        shell: python
        run: |
          if "${{ github.event_name }}" == "pull_request":
              sha = "${{ steps.merge-commit-sha.outputs.COMMIT_SHA }}"
              print(f"::set-output name=GIT_COMMIT_SHA::{sha}")
          else:
              print("::set-output name=GIT_COMMIT_SHA::${{ github.sha }}")

  set-status:
    name: Set status on commit
    needs: [pre-commit, set-git-env-vars]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Get repo dir name
        id: repo-dir
        shell: bash
        run: |
          repo_dir=${GITHUB_REPOSITORY#${{ github.repository_owner }}/}
          echo "::set-output name=repo-dir::$repo_dir"
        if: >
          needs.pre-commit.result != 'skipped' &&
          needs.set-git-env-vars.result != 'skipped'

      - name: Set status via gihub API
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/{owner}/{repo}/statuses/{sha}
          owner: ${{ github.repository_owner }}
          repo: ${{ steps.repo-dir.outputs.repo-dir }}
          sha: ${{ needs.set-git-env-vars.outputs.GIT_COMMIT_SHA }}
          state: ${{ needs.pre-commit.result }}
          target_url: |
            "https://github.com/${{ github.repository }}/runs/${{ github.run_id }}"
          description: CI pipeline for code qualitiy
          context: ci-code-quality
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: steps.repo-dir.outcome == 'success'
