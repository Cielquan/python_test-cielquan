#: -- TOX CONFIG -----------------------------------------------------------------------
[tox]
package = python_test_cielquan
minversion = 3.15.0
skip_missing_interpreters = true
#: Activate isolated build environment - PEP-517/518.
isolated_build = true
#: Application -> true; Library -> false
skipsdist = false

envlist =
    pre-commit
    package
    py{py3,310,39,38,37}
    coverage-all
    docs-test-{html,linkcheck,coverage,doctest,spelling,confluence}


[testenv]
description = basic config env
passenv =
    HOME
    CI
setenv =
    PIP_DISABLE_VERSION_CHECK = 1
    COVERAGE_FILE = {env:COVERAGE_FILE:{toxinidir}/.coverage_cache/.coverage.{envname}}
download = true
skip_install = true


[testenv:safety]
description = check all dependencies for known vulnerabilities
skip_install = true
deps = poetry>=1.2.0a2
commands =
    poetry install --only poetry,safety
    # NOTE: add extras if any
    poetry export --output {envtmpdir}/requirements.txt
    safety check -r {envtmpdir}/requirements.txt --full-report


[testenv:pre-commit]
description = format and check the code
passenv =
    SSH_AUTH_SOCK
    SKIP
setenv =
    SKIP = {tty:identity:},{env:SKIP:}
deps = poetry>=1.2.0a2
ignore_errors = true
commands =
    poetry install {tty:--ansi:} --with poetry,lint,testing,docs --without dev,lint
    pre-commit run {posargs} --all-files {tty::--show-diff-on-failure} {tty:--color=always:}


[testenv:package]
description = check sdist and wheel
skip_install = true
deps = poetry>=1.2.0a2
commands =
    poetry install {tty:--ansi:} --only poetry,twine
    poetry build {tty:--ansi:} -vvv
    twine check --strict dist/*


[testenv:py{py3,310,39,38,37}]
description = run tests with {basepython}
passenv =
    {[testenv]passenv}
    PYTEST_*
commands =
    poetry install {tty:--ansi:} --with testing --without dev,lint
    pytest \
    {tty:--color=yes:}
    --basetemp="{envtmpdir}" \
    --cov "{envsitepackagesdir}/{[tox]package}" \
    --cov-fail-under 0 \
    --junitxml {toxinidir}/.junit_cache/junit.{envname}.xml \
    --numprocesses={env:PYTEST_XDIST_N:auto} \
    {posargs:tests}


[testenv:coverage-{all,merge,report}]
description =
    all,merge: combine coverage data and create xml/html reports;
    all,report: report total and diff coverage against origin/master (or DIFF_AGAINST)
depends = py{py3,310,39,38,37}
passenv =
    {[testenv]passenv}
    all,report: MIN_COVERAGE
    all,report: MIN_DIFF_COVERAGE
    all,report: DIFF_AGAINST
    all,report: DIFF_RANGE_NOTATION
setenv =
    COVERAGE_FILE={toxinidir}/.coverage_cache/.coverage
skip_install = true
deps = poetry>=1.2.0a2
parallel_show_output = true
ignore_errors = true
commands =
    poetry install --only coverage
    all,report: poetry install --only diff-cover
    all,merge: coverage combine
    all,merge: coverage xml -o {toxinidir}/.coverage_cache/coverage.xml
    all,merge: coverage html -d {toxinidir}/.coverage_cache/htmlcov
    all,report: coverage report -m --fail-under={env:MIN_COVERAGE:100}
    all,report: diff-cover --compare-branch {env:DIFF_AGAINST:origin/master} \
    all,report:     --ignore-staged --ignore-unstaged \
    all,report:     --fail-under {env:MIN_DIFF_COVERAGE:100} \
    all,report:     --diff-range-notation {env:DIFF_RANGE_NOTATION:..} \
    all,report:     {toxinidir}/.coverage_cache/coverage.xml


[testenv:docs{,-auto}]
description = build docs with sphinx
deps = poetry>=1.2.0a2
commands =
    poetry install {tty:--ansi:} --with docs --without dev,lint
    docs-auto: poetry install {tty:--ansi:} --only sphinx-autobuild
    #: Build fresh docs
    docs: sphinx-build {tty:--color:} -b html -aE docs/source docs/build/html
    docs-auto: sphinx-autobuild -b html -aE docs/source docs/build/html
    #: Output link to index.html
    python -c \
       'from pathlib import Path; \
        index_file = Path(r"{toxinidir}")/"docs/build/html/index.html"; \
        print(f"DOCUMENTATION AVAILABLE UNDER: \{index_file.as_uri()\}")'


[testenv:docs-test-{html,linkcheck,coverage,doctest,spelling,confluence}]
description = build and check docs with (see env name) sphinx builder
deps = poetry>=1.2.0a2
commands =
    poetry install {tty:--ansi:} --with docs --without dev,lint
    #: html
    html: sphinx-build {tty:--color:} -b html -aE -v -nW --keep-going docs/source docs/build/test/html
    #: confluence
    confluence: sphinx-build {tty:--color:} -b confluence -aE -v -nW --keep-going docs/source docs/build/test/confluence -t builder_confluence
    #: linkcheck
    linkcheck: sphinx-build {tty:--color:} -b linkcheck -aE -v -nW --keep-going docs/source docs/build/test/linkcheck
    #: coverage
    coverage: sphinx-build {tty:--color:} -b coverage -aE -v -nW --keep-going docs/source docs/build/test/coverage
    #: doctest
    doctest: sphinx-build {tty:--color:} -b doctest -aE -v -nW --keep-going docs/source docs/build/test/doctest
    #: spelling
    spelling: sphinx-build {tty:--color:} -b spelling -aE -v -nW --keep-going docs/source docs/build/test/spelling


[testenv:code-test]
description = Run py{py3,310,39,38,37} and coverage-all
skip_install = true
whitelist_externals = tox
commands =
    tox -e py{py3,310,39,38,37}
    tox -e coverage-all


[testenv:docs-test]
description = Run docs-test-{html,linkcheck,coverage,doctest,spelling,confluence}
skip_install = true
whitelist_externals = tox
commands =
    tox -e docs-test-{html,linkcheck,coverage,doctest,spelling,confluence}
