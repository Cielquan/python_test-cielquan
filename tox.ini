[tox]
package = python_test_cielquan

minversion = 3.15.0
requires =
    tox-envlist
    tox-poetry-installer[poetry]
skip_missing_interpreters = true
ignore_basepython_conflict = true
# Activate isolated build environment - PEP-517/518.
isolated_build = true
# Application -> true; Library -> false
skipsdist = false

envlist =
    safety
    package
    pre-commit
    py{py3,310,39,38}
    coverage-all
    docs-test-{html,linkcheck,coverage,doctest,spelling,confluence}


[envlists]
test = py{py3,310,39,38},coverage-all
qa = safety,pre-commit
docs-test = docs-test-{html,linkcheck,coverage,doctest,spelling,confluence}


[testenv]
description = basic config env
basepython = python3.8
passenv =
    HOME
    CI
setenv =
    PIP_DISABLE_VERSION_CHECK = 1
download = true


[testenv:safety]
description = check all dependencies for known vulnerabilities
setenv =
    {[testenv]setenv}
    REQ_FILE = {envtmpdir}/requirements.txt
skip_install = true
deps =
    poetry >= 1.1.13
    safety >= 1.10.2
commands =
    poetry export {tty:--ansi:} --no-interaction --without-hashes --output {env:REQ_FILE}
    python -c 'import pathlib; print(pathlib.Path("{env:REQ_FILE}").read_text())'
    safety check --full-report --file {env:REQ_FILE}


[testenv:pre-commit]
description = format and check the code
envdir = {toxworkdir}/pre-commit
passenv =
    {[testenv]passenv}
    SSH_AUTH_SOCK
    SKIP
setenv =
    {[testenv]setenv}
    SKIP = {tty:identity:},{env:SKIP:}
skip_install = true
deps = pre-commit >= 2.17
commands = pre-commit run {posargs} --all-files {tty::--show-diff-on-failure} {tty:--color always:}


[testenv:pre-commit-install]
description = install pre-commit as git hook from the tox env
envdir = {[testenv:pre-commit]envdir}
skip_install = {[testenv:pre-commit]skip_install}
deps = {[testenv:pre-commit]deps}
commands = pre-commit install


[testenv:mypy]
description = run mypy type checker
extras =
    mypy
    testing
    docs
; commands_pre =
;     pip install --force-reinstall mypy_stubs/asyncmy-stubs
commands =
    ; mypy \
    ;     --config-file {toxinidir}/pyproject.toml \
    ;     mypy_stubs/asyncmy-stubs/asyncmy-stubs

    mypy \
        --config-file {toxinidir}/pyproject.toml \
        src/{[tox]package} \
        tests \
        docs/source/conf.py

; NOTE: for stubbing external packges put setup.py with following content into `mypy_stubs/asyncmy-stubs/setup.py`
; ```py
; from setuptools import setup
; setup(
;     name="asyncmy-stubs",
;     author="me",
;     version="0.2.9", # NOTE: pin version to them same as stubbed package
;     package_data={"asyncmy-stubs": ["py.typed"]},
;     packages=["asyncmy-stubs"],
; )
; ```
; NOTE: setup.py works and pyproject.toml somehow not



[testenv:pylint]
description = run pylint linter
extras =
    pylint
    testing
    docs
commands = pylint --disable=spelling {posargs:src/{[tox]package} tests docs}


[testenv:package]
description = check sdist and wheel
skip_install = true
deps =
    poetry >= 1.1.13
    twine >= 3.3
commands =
    poetry build {tty:--ansi:} --no-interaction -vvv
    twine check --strict dist/*


[testenv:py{py3,310,39,38}]
description = run tests with {basepython}
passenv =
    {[testenv]passenv}
    PYTEST_*
setenv =
    {[testenv]setenv}
    COVERAGE_FILE = {env:COVERAGE_FILE:{toxinidir}/.coverage_cache/.coverage.{envname}}
extras =
    testing
    coverage
commands =
    pytest \
        {tty:--color yes:} \
        --basetemp {envtmpdir} \
        --cov {envsitepackagesdir}/{[tox]package} \
        --cov-fail-under 0 \
        --junitxml {toxinidir}/.junit_cache/junit.{envname}.xml \
        --numprocesses {env:PYTEST_XDIST_N:auto} \
        {posargs:tests}


[testenv:coverage-{all,merge,report}]
description =
    all,merge: combine coverage data and create xml/html reports;
    all,report: report total and diff coverage against origin/master (or DIFF_AGAINST)
envdir = {toxworkdir}/coverage
depends = py{py3,310,39,38}
passenv =
    {[testenv]passenv}
    all,report: MIN_COVERAGE
    all,report: MIN_DIFF_COVERAGE
    all,report: DIFF_AGAINST
    all,report: DIFF_RANGE_NOTATION
setenv =
    {[testenv]setenv}
    COVERAGE_FILE={toxinidir}/.coverage_cache/.coverage
skip_install = true
require_poetry = true
require_locked_deps = true
locked_deps =
    coverage
    coverage-conditional-plugin
    diff-cover
parallel_show_output = true
ignore_errors = true
commands =
    all,merge:  coverage combine
    all,merge:  coverage xml -o {toxinidir}/.coverage_cache/coverage.xml
    all,merge:  coverage html -d {toxinidir}/.coverage_cache/htmlcov
    all,report: coverage report -m --fail-under {env:MIN_COVERAGE:100}
    all,report: diff-cover --compare-branch {env:DIFF_AGAINST:origin/main} \
    all,report:     --ignore-staged --ignore-unstaged \
    all,report:     --fail-under {env:MIN_DIFF_COVERAGE:100} \
    all,report:     --diff-range-notation {env:DIFF_RANGE_NOTATION:..} \
    all,report:     {toxinidir}/.coverage_cache/coverage.xml


[testenv:docs{,-auto}]
description = build docs with sphinx
envdir = {toxworkdir}/docs
setenv =
    {[testenv]setenv}
    TOXENV_BUILDCMD = sphinx-build {tty:--color:}
    auto: TOXENV_BUILDCMD = sphinx-autobuild
extras = docs
commands =
    # Build fresh docs
    {env:TOXENV_BUILDCMD} -b html -aE docs/source docs/build/html
    # Output link to index.html
    python -c \
       'from pathlib import Path; \
        index_file = Path(r"{toxinidir}")/"docs/build/html/index.html"; \
        print(f"DOCUMENTATION AVAILABLE UNDER: \{index_file.as_uri()\}")'


[testenv:docs-test-{html,linkcheck,coverage,doctest,spelling,confluence}]
description = Build and check docs with (see env name) sphinx builder
envdir = {[testenv:docs]envdir}
setenv =
    {[testenv]setenv}
    html:       TOXENV_BUILDER = html
    linkcheck:  TOXENV_BUILDER = linkcheck
    coverage:   TOXENV_BUILDER = coverage
    doctest:    TOXENV_BUILDER = doctest
    spelling:   TOXENV_BUILDER = spelling
    confluence: TOXENV_BUILDER = confluence
    confluence: TOXENV_ADD_ARGS = -t builder_confluence
extras = {[testenv:docs]extras}
commands =
    sphinx-build {tty:--color:} -b {env:TOXENV_BUILDER} \
        -aE -v -nW --keep-going {env:TOXENV_ADD_ARGS:} \
        docs/source docs/build/test/{env:TOXENV_BUILDER}
