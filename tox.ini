#: -- TOX CONFIG -----------------------------------------------------------------------
[tox]
package = python_test_cielquan

minversion = 3.15.0
requires = tox-envlist
skip_missing_interpreters = true
#: Activate isolated build environment - PEP-517/518.
isolated_build = true
#: Application -> true; Library -> false
skipsdist = false

envlist =
    safety
    package
    pre-commit
    py{py3,310,39,38,37}
    coverage-all
    docs-test-{html,linkcheck,coverage,doctest,spelling,confluence}


[envlists]
test = py{py3,310,39,38,37},coverage-all
qa = safety,pre-commit
docs-test = docs-test-{html,linkcheck,coverage,doctest,spelling,confluence}


[globals]
poetry_version = git+https://github.com/python-poetry/poetry.git@1196923dd637ca5cca3b8259a5c9cfabe87649cc


[testenv]
description = basic config env
passenv =
    HOME
    CI
setenv =
    PIP_DISABLE_VERSION_CHECK = 1
    COVERAGE_FILE = {env:COVERAGE_FILE:{toxinidir}/.coverage_cache/.coverage.{envname}}
download = true
skip_install = true


[testenv:safety]
description = check all dependencies for known vulnerabilities
skip_install = true
deps = {[globals]poetry_version}
commands =
    poetry install {tty:--ansi:} --sync
    pip list
    safety check --full-report


[testenv:pre-commit]
description = format and check the code
passenv =
    SSH_AUTH_SOCK
    SKIP
setenv =
    SKIP = {tty:identity:},{env:SKIP:}
deps = {[globals]poetry_version}
ignore_errors = true
commands =
    poetry install {tty:--ansi:} --sync --with poetry,lint,testing,docs --without dev,lint
    pre-commit run {posargs} --all-files {tty::--show-diff-on-failure} {tty:--color always:}


[testenv:package]
description = check sdist and wheel
skip_install = true
deps = {[globals]poetry_version}
commands =
    poetry install {tty:--ansi:} --sync --only poetry,twine
    poetry build {tty:--ansi:} -vvv
    twine check --strict dist/*


[testenv:py{py3,310,39,38,37}]
description = run tests with {basepython}
passenv =
    {[testenv]passenv}
    PYTEST_*
commands =
    poetry install {tty:--ansi:} --sync --with testing --without dev,lint
    pytest \
        {tty:--color yes:}
        --basetemp {envtmpdir} \
        --cov {envsitepackagesdir}/{[tox]package} \
        --cov-fail-under 0 \
        --junitxml {toxinidir}/.junit_cache/junit.{envname}.xml \
        --numprocesses {env:PYTEST_XDIST_N:auto} \
        {posargs:tests}


[testenv:coverage-{all,merge,report}]
description =
    all,merge: combine coverage data and create xml/html reports;
    all,report: report total and diff coverage against origin/master (or DIFF_AGAINST)
depends = py{py3,310,39,38,37}
passenv =
    {[testenv]passenv}
    all,report: MIN_COVERAGE
    all,report: MIN_DIFF_COVERAGE
    all,report: DIFF_AGAINST
    all,report: DIFF_RANGE_NOTATION
setenv =
    COVERAGE_FILE={toxinidir}/.coverage_cache/.coverage
    merge:      TOXENV_INSTALL_GROUPS=poetry,coverage
    all,report: TOXENV_INSTALL_GROUPS=poetry,coverage,diff-cover
skip_install = true
deps = {[globals]poetry_version}
parallel_show_output = true
ignore_errors = true
commands =
    poetry install {tty:--ansi:} --sync --only {env:TOXENV_INSTALL_GROUPS}
    all,merge:  coverage combine
    all,merge:  coverage xml -o {toxinidir}/.coverage_cache/coverage.xml
    all,merge:  coverage html -d {toxinidir}/.coverage_cache/htmlcov
    all,report: coverage report -m --fail-under {env:MIN_COVERAGE:100}
    all,report: diff-cover --compare-branch {env:DIFF_AGAINST:origin/main} \
    all,report:     --ignore-staged --ignore-unstaged \
    all,report:     --fail-under {env:MIN_DIFF_COVERAGE:100} \
    all,report:     --diff-range-notation {env:DIFF_RANGE_NOTATION:..} \
    all,report:     {toxinidir}/.coverage_cache/coverage.xml


[testenv:docs{,-auto}]
description = build docs with sphinx
setenv =
    docs:       TOXENV_INSTALL_GROUPS=docs
    docs-test:  TOXENV_INSTALL_GROUPS=docs,sphinx-autobuild
deps = {[globals]poetry_version}
commands =
    poetry install {tty:--ansi:} --sync --with {env:TOXENV_INSTALL_GROUPS} --without dev,lint
    #: Build fresh docs
    docs:       sphinx-build {tty:--color:} -b html -aE docs/source docs/build/html
    docs-auto:  sphinx-autobuild -b html -aE docs/source docs/build/html
    #: Output link to index.html
    python -c \
       'from pathlib import Path; \
        index_file = Path(r"{toxinidir}")/"docs/build/html/index.html"; \
        print(f"DOCUMENTATION AVAILABLE UNDER: \{index_file.as_uri()\}")'


[testenv:docs-test-{html,linkcheck,coverage,doctest,spelling,confluence}]
description = Build and check docs with (see env name) sphinx builder
setenv =
    html:       TOXENV_BUILDER = html
    linkcheck:  TOXENV_BUILDER = linkcheck
    coverage:   TOXENV_BUILDER = coverage
    doctest:    TOXENV_BUILDER = doctest
    spelling:   TOXENV_BUILDER = spelling
    confluence: TOXENV_BUILDER = confluence
    confluence: TOXENV_ADD_ARGS = -t builder_confluence
deps = {[globals]poetry_version}
commands =
    poetry install {tty:--ansi:} --sync --with docs --without dev,lint
    sphinx-build {tty:--color:} -b {env:TOXENV_BUILDER} \
        -aE -v -nW --keep-going {env:TOXENV_ADD_ARGS:} \
        docs/source docs/build/test/{env:TOXENV_BUILDER}
