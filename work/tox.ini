#: -- TOX CONFIG -----------------------------------------------------------------------
[tox]
package = api
minversion = 3.15.0
skip_missing_interpreters = true
#: Activate isolated build environment - PEP-517/518.
isolated_build = true
#: Application -> true; Library -> false
skipsdist = true

envlist =
    safety-all
    package-all
    lint-all
    code-test-all
    docs-test-all


[testenv]
description = basic config env
passenv =
    HOME
    CI
    SSH_AUTH_SOCK
setenv =
    PIP_DISABLE_VERSION_CHECK = 1
download = true
skip_install = true


[testenv:safety-{all,admin,api}]
description = check all dependencies for known vulnerabilities
setenv =
    all: TOXENV_INSTALL_GROUPS=poetry,safety,swlp-admin,swlp-api
    admin: TOXENV_INSTALL_GROUPS=poetry,safety,swlp-admin
    api: TOXENV_INSTALL_GROUPS=poetry,safety,swlp-api
skip_install = true
deps = git+https://github.com/python-poetry/poetry.git@1196923dd637ca5cca3b8259a5c9cfabe87649cc
commands =
    poetry install {tty:--ansi:} --sync --only {env:TOXENV_INSTALL_GROUPS}
    pip list
    safety check --full-report


[testenv:package-{all,admin,api}]
description = check sdist and wheel
skip_install = true
setenv =
    PATH = {toxinidir}/scripts/{:}{env:PATH}
whitelist_externals =
    all,admin: admin
    all,api: api
deps = git+https://github.com/python-poetry/poetry.git@1196923dd637ca5cca3b8259a5c9cfabe87649cc
commands =
    poetry install {tty:--ansi:} --sync --only poetry,twine
    all,admin: admin poetry build {tty:--ansi:} -vvv
    all,admin: admin twine check --strict dist/*
    all,api: api poetry build {tty:--ansi:} -vvv
    all,api: api twine check --strict dist/*


[testenv:mypy-{admin,api}]
description = type check python source
setenv =
    admin: TOXENV_INSTALL_GROUPS=poetry,mypy,testing,swlp-admin
    admin: TOXENV_DEFAULT_POSARGS=bin/swlp-admin
    api: TOXENV_INSTALL_GROUPS=poetry,mypy,testing,swlp-api
    api: TOXENV_DEFAULT_POSARGS=bin/swlp-api
deps = git+https://github.com/python-poetry/poetry.git@1196923dd637ca5cca3b8259a5c9cfabe87649cc
commands =
    poetry install {tty:--ansi:} --sync --only {env:TOXENV_INSTALL_GROUPS}
    mypy {posargs:{env:TOXENV_DEFAULT_POSARGS}}


[testenv:flakeheaven-{admin,api}]
description = lint python source
setenv =
    admin: TOXENV_INSTALL_GROUPS=poetry,lint,testing,swlp-admin
    admin: TOXENV_DEFAULT_POSARGS=bin/swlp-admin
    api: TOXENV_INSTALL_GROUPS=poetry,lint,testing,swlp-api
    api: TOXENV_DEFAULT_POSARGS=bin/swlp-api
deps = git+https://github.com/python-poetry/poetry.git@1196923dd637ca5cca3b8259a5c9cfabe87649cc
commands =
    poetry install {tty:--ansi:} --sync --only {env:TOXENV_INSTALL_GROUPS}
    flakeheaven lint --safe {posargs:{env:TOXENV_DEFAULT_POSARGS}}


[testenv:lint-{all,admin,api}]
description = Run flakeheaven and mypy
skip_install = true
whitelist_externals = tox
commands =
    all: tox -e mypy-{admin,api}
    all: tox -e flakeheaven-{admin,api}
    admin: tox -e mypy-admin
    admin: tox -e flakeheaven-admin
    api: tox -e mypy-api
    api: tox -e flakeheaven-api


[testenv:py{310,39,38}-{admin,api}]
description = run tests with {basepython}
passenv =
    {[testenv]passenv}
    PYTEST_*
setenv =
    admin: TOXENV_INSTALL_GROUPS=poetry,testing,swlp-admin
    admin: COVERAGE_FILE={toxinidir}/.coverage_cache/swlp-admin/.coverage.{envname}
    admin: TOXENV_COV_TARGET={envsitepackagesdir}/swlp_admin
    admin: TOXENV_JUNIT_FILE={toxinidir}/.junit_cache/swlp-admin/junit.{envname}.xml
    admin: TOXENV_DEFAULT_POSARGS=bin/swlp-admin/tests
    api: TOXENV_INSTALL_GROUPS=poetry,testing,swlp-api
    api: COVERAGE_FILE={toxinidir}/.coverage_cache/swlp-api/.coverage.{envname}
    api: TOXENV_COV_TARGET={envsitepackagesdir}/swlp_api
    api: TOXENV_JUNIT_FILE={toxinidir}/.junit_cache/swlp-api/junit.{envname}.xml
    api: TOXENV_DEFAULT_POSARGS=bin/swlp-api/tests
deps = git+https://github.com/python-poetry/poetry.git@1196923dd637ca5cca3b8259a5c9cfabe87649cc
commands =
    poetry install {tty:--ansi:} --sync --only {env:TOXENV_INSTALL_GROUPS}
    pytest \
    {tty:--color yes:} \
    --basetemp {envtmpdir} \
    --cov {env:TOXENV_COV_TARGET} \
    --cov-fail-under 0 \
    --junitxml {env:TOXENV_JUNIT_FILE} \
    --numprocesses {env:PYTEST_XDIST_N:auto} \
    {posargs:{env:TOXENV_DEFAULT_POSARGS}}


[testenv:coverage-{all,merge,report}-{admin,api}]
description =
    all,merge: combine coverage data and create xml/html reports;
    all,report: report total and diff coverage against origin/master (or DIFF_AGAINST)
depends =
    admin: py{310,39,38}-admin
    api: py{310,39,38}-api
passenv =
    {[testenv]passenv}
    all,report: MIN_COVERAGE
    all,report: MIN_DIFF_COVERAGE
    all,report: DIFF_AGAINST
    all,report: DIFF_RANGE_NOTATION
setenv =
    merge: TOXENV_INSTALL_GROUPS=poetry,coverage
    all,report: TOXENV_INSTALL_GROUPS=poetry,coverage,diff-cover
    admin: COVERAGE_FILE={toxinidir}/.coverage_cache/swlp-admin/.coverage
    admin: TOXENV_COVERAGE_XML={toxinidir}/.coverage_cache/swlp-admin/coverage.xml
    admin: TOXENV_COVERAGE_HTML={toxinidir}/.coverage_cache/swlp-admin/htmlcov
    api: COVERAGE_FILE={toxinidir}/.coverage_cache/swlp-api/.coverage
    api: TOXENV_COVERAGE_XML={toxinidir}/.coverage_cache/swlp-api/coverage.xml
    api: TOXENV_COVERAGE_HTML={toxinidir}/.coverage_cache/swlp-api/htmlcov
skip_install = true
deps = git+https://github.com/python-poetry/poetry.git@1196923dd637ca5cca3b8259a5c9cfabe87649cc
parallel_show_output = true
ignore_errors = true
commands =
    poetry install {tty:--ansi:} --sync --only {env:TOXENV_INSTALL_GROUPS}
    all,merge: coverage combine
    all,merge: coverage xml -o {env:TOXENV_COVERAGE_XML}
    all,merge: coverage html -d {env:TOXENV_COVERAGE_HTML}
    all,report: coverage report -m --fail-under {env:MIN_COVERAGE:100}
    all,report: diff-cover --compare-branch {env:DIFF_AGAINST:origin/main} \
    all,report:     --ignore-staged --ignore-unstaged \
    all,report:     --fail-under {env:MIN_DIFF_COVERAGE:100} \
    all,report:     --diff-range-notation {env:DIFF_RANGE_NOTATION:..} \
    all,report:     {env:TOXENV_COVERAGE_XML}


[testenv:code-test-{all,admin,api}]
description = Run py{310,39,38} and coverage-all
skip_install = true
whitelist_externals = tox
commands =
    all: tox -e py{310,39,38}-{admin,api}
    all: tox -e coverage-all-{admin,api}
    admin: tox -e py{310,39,38}-admin
    admin: tox -e coverage-all-admin
    api: tox -e py{310,39,38}-api
    api: tox -e coverage-all-api


[testenv:docs{,-auto}]
description = build docs with sphinx
setenv =
    docs: TOXENV_INSTALL_GROUPS=poetry,docs,swlp-admin,swlp-api
    docs-auto: TOXENV_INSTALL_GROUPS=poetry,docs,sphinx-autobuild,swlp-admin,swlp-api
deps = git+https://github.com/python-poetry/poetry.git@1196923dd637ca5cca3b8259a5c9cfabe87649cc
commands =
    poetry install {tty:--ansi:} --sync --only {env:TOXENV_INSTALL_GROUPS}
    #: Build fresh docs
    docs: sphinx-build {tty:--color:} -b html -aE docs/source docs/build/html
    docs-auto: sphinx-autobuild -b html -aE docs/source docs/build/html
    #: Output link to index.html
    python -c \
       'from pathlib import Path; \
        index_file = Path(r"{toxinidir}")/"docs/build/html/index.html"; \
        print(f"DOCUMENTATION AVAILABLE UNDER: \{index_file.as_uri()\}")'


[testenv:docs-test-{all,html,linkcheck,coverage,doctest,spelling,confluence}]
description = build and check docs with (see env name) sphinx builder
deps = git+https://github.com/python-poetry/poetry.git@1196923dd637ca5cca3b8259a5c9cfabe87649cc
commands =
    poetry install {tty:--ansi:} --sync --only poetry,docs,swlp-admin,swlp-api
    #: html
    all,html: sphinx-build {tty:--color:} -b html -aE -v -nW --keep-going docs/source docs/build/test/html
    #: confluence
    all,confluence: sphinx-build {tty:--color:} -b confluence -aE -v -nW --keep-going docs/source docs/build/test/confluence -t builder_confluence
    #: linkcheck
    all,linkcheck: sphinx-build {tty:--color:} -b linkcheck -aE -v -nW --keep-going docs/source docs/build/test/linkcheck
    #: coverage
    all,coverage: sphinx-build {tty:--color:} -b coverage -aE -v -nW --keep-going docs/source docs/build/test/coverage
    #: doctest
    all,doctest: sphinx-build {tty:--color:} -b doctest -aE -v -nW --keep-going docs/source docs/build/test/doctest
    #: spelling
    all,spelling: sphinx-build {tty:--color:} -b spelling -aE -v -nW --keep-going docs/source docs/build/test/spelling
